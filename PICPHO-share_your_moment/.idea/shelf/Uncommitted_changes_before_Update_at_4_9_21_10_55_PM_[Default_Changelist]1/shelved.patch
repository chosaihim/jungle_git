Index: app/src/main/java/com/example/pic_pho/ImageHandler/ImageHandler.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pic_pho.ImageHandler\n\nimport android.content.Context\nimport android.content.Intent\nimport android.database.Cursor\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.net.Uri\nimport android.provider.MediaStore\nimport android.util.Base64\nimport androidx.exifinterface.media.ExifInterface\nimport com.example.pic_pho.PhotoRoomServer.ServerPhotoRoomActivity\nimport id.zelory.compressor.Compressor\nimport id.zelory.compressor.constraint.format\nimport id.zelory.compressor.constraint.quality\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.runBlocking\nimport java.io.ByteArrayOutputStream\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.OutputStream\n\nclass ImageHandler(context: Context) {\n    companion object {\n        fun compressImage(originalImage: File, context: Context): File? {\n            var resultImage: File? = null\n            runBlocking {\n                CoroutineScope(Dispatchers.Default).launch {\n                    launch {\n                        // Default compression\n                        resultImage =\n                            Compressor.compress(context = context, originalImage!!)\n                            {\n//                    resolution(1500, 1500)\n                                quality(95)\n                                format(Bitmap.CompressFormat.JPEG)\n//                    size(1_097_152) // 2 MB\n                            }\n                    }\n                }.join()\n            }\n            return resultImage\n        }\n\n        fun bitmapToString(bitmap: Bitmap): String? {\n            val byteArrayOutputStream =\n                ByteArrayOutputStream() //바이트 배열을 차례대로 읽어 들이기위한 ByteArrayOutputStream클래스 선언\n            bitmap.compress(\n                Bitmap.CompressFormat.JPEG,\n                90,\n                byteArrayOutputStream\n            ) //bitmap을 압축 (숫자 70은 70%로 압축한다는 뜻)\n            val bytes: ByteArray = byteArrayOutputStream.toByteArray() //해당 bitmap을 byte배열로 바꿔준다.\n            return Base64.encodeToString(bytes, Base64.DEFAULT) //String을 retrurn\n        }\n\n        fun convertString64ToImage(base64String: String): Bitmap {\n            val decodedString = Base64.decode(base64String, Base64.DEFAULT)\n            return BitmapFactory.decodeByteArray(decodedString, 0, decodedString.size)\n        }\n\n        fun saveBitmapAsFile(\n            bitmap: Bitmap,\n            file: File,\n            receivedTakeTime: String,\n            receivedOwner: String\n        ) {\n            var os: OutputStream? = null\n            try {\n                file.createNewFile()\n                os = FileOutputStream(file)\n                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, os)\n                var exif = ExifInterface(file)\n                exif.setAttribute(ExifInterface.TAG_DATETIME, receivedTakeTime)\n                exif.setAttribute(ExifInterface.TAG_ARTIST, receivedOwner)\n                exif.saveAttributes()\n                ServerPhotoRoomActivity.getExif(file)\n                os.close()\n            } catch (e: java.lang.Exception) {\n                e.printStackTrace()\n            }\n        }\n\n        fun selectPhoto(): Intent {\n            var intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\n            intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);\n            intent.data = MediaStore.Images.Media.EXTERNAL_CONTENT_URI\n            intent.type = \"image/*\"\n            return intent\n        }\n\n        fun getFullPathFromUri(context: Context, fileUri: Uri?): String? {\n            var fullPath: String? = null\n            val column = \"_data\"\n            var cursor: Cursor = context.contentResolver.query(fileUri!!, null, null, null, null)!!\n            if (cursor != null) {\n                cursor.moveToFirst()\n                var documentId: String = cursor.getString(0)\n                if (documentId == null) {\n                    for (i in 0 until cursor.columnCount) {\n                        if (column.equals(cursor.getColumnName(i), ignoreCase = true)) {\n                            fullPath = cursor.getString(i)\n                            break\n                        }\n                    }\n                } else {\n                    documentId = documentId.substring(documentId.lastIndexOf(\":\") + 1)\n                    cursor.close()\n                    val projection = arrayOf(column)\n                    try {\n                        cursor = context.contentResolver.query(\n                            MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\n                            projection,\n                            MediaStore.Images.Media._ID + \" = ? \",\n                            arrayOf(documentId),\n                            null\n                        )!!\n                        if (cursor != null) {\n                            cursor.moveToFirst()\n                            fullPath = cursor.getString(cursor.getColumnIndexOrThrow(column))\n                        }\n                    } finally {\n                        if (cursor != null) cursor.close()\n                    }\n                }\n            }\n            return fullPath\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pic_pho/ImageHandler/ImageHandler.kt	(revision cd8d73175f437d7ba1148f2857d784ed2c2480ea)
+++ app/src/main/java/com/example/pic_pho/ImageHandler/ImageHandler.kt	(date 1617967276000)
@@ -17,10 +17,7 @@
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.launch
 import kotlinx.coroutines.runBlocking
-import java.io.ByteArrayOutputStream
-import java.io.File
-import java.io.FileOutputStream
-import java.io.OutputStream
+import java.io.*
 
 class ImageHandler(context: Context) {
     companion object {
@@ -128,5 +125,24 @@
             }
             return fullPath
         }
+
+        fun getOrientationOfImage(filepath: String?): Int {
+            var exif: ExifInterface? = null
+            exif = try {
+                ExifInterface(filepath!!)
+            } catch (e: IOException) {
+                e.printStackTrace()
+                return -1
+            }
+            val orientation = exif!!.getAttributeInt(ExifInterface.TAG_ORIENTATION, -1)
+            if (orientation != -1) {
+                when (orientation) {
+                    ExifInterface.ORIENTATION_ROTATE_90 -> return 90
+                    ExifInterface.ORIENTATION_ROTATE_180 -> return 180
+                    ExifInterface.ORIENTATION_ROTATE_270 -> return 270
+                }
+            }
+            return 0
+        }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/pic_pho/PhotoRoomServer/ViewPager/ServerPhotoRoomPagerViewHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pic_pho.PhotoRoomServer.ViewPager\n\nimport android.content.Intent\nimport android.util.Log\nimport android.view.View\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.pic_pho.App\nimport com.example.pic_pho.CellularSocket.SocketUtil.Companion.mSocket\nimport com.example.pic_pho.PhotoRoomServer.ServerPhotoEnlargeActivity\nimport com.example.pic_pho.PhotoRoomServer.ServerPhotoRoomActivity\nimport com.example.pic_pho.PhotoRoomServer.ServerPhotoRoomActivity.Companion.photoPickedList\nimport com.example.pic_pho.PhotoRoomServer.ServerPhotoRoomActivity.Companion.photoPickedUriList\nimport com.example.pic_pho.PhotoRoomServer.ServerPhotoRoomActivity.Companion.serverDrawerPickAdapter\nimport com.example.pic_pho.PhotoRoomServer.ServerThumbnailPhotoModel\nimport com.example.pic_pho.R\nimport com.example.pic_pho.WaitingRoomServer.ServerWaitingRoomActivity.Companion.serverFilePathList\nimport kotlinx.android.synthetic.main.item_photoroom_pager.view.SelectedPhoto\nimport kotlinx.android.synthetic.main.item_serverphotoroom_pager.view.*\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\n\nclass ServerPhotoRoomPagerViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    private val itemImage = itemView.SelectedPhoto\n    private val favoriteImage = itemView.imageView_favorite_server\n    private val bookmarkImage = itemView.imageView_bookmark_server\n    private val maxImage = itemView.imageView_photomax_server\n    private val icon_bar = itemView.linearLayout_image_icon_bar\n    private val roomAddress: String = ServerPhotoRoomActivity.roomAddress!!\n    private val likeCountText = itemView.textView_heart\n\n\n    fun bindWithView(serverThumbnailPhotoModel: ServerThumbnailPhotoModel) {\n\n        Log.d(\"TAG\", \"bindWithView: ${serverThumbnailPhotoModel.thumbnailPhoto}\")\n        Glide\n            .with(App.instance)\n            .load(serverThumbnailPhotoModel.thumbnailPhoto)\n            .into(itemImage)\n\n        likeCountText.text = serverThumbnailPhotoModel.likeCount.toString() + \"개\"\n\n\n        if (serverThumbnailPhotoModel.userimg != null){\n            Glide\n                .with(App.instance)\n                .load(serverThumbnailPhotoModel.userimg)\n                .into(itemView.ProfileInPhotoRoom)\n        }\n\n        if (serverThumbnailPhotoModel.username != null){\n            itemView.UsernameInPhotoRoom.text = serverThumbnailPhotoModel.username\n        }\n\n        CoroutineScope(Dispatchers.Main).launch {\n            if (serverThumbnailPhotoModel.isLike) {\n                favoriteImage.setImageResource(R.drawable.favorite_fill)\n            } else {\n                favoriteImage.setImageResource(R.drawable.favorite_2)\n            }\n\n\n            if (serverThumbnailPhotoModel.isPicked) {\n                bookmarkImage.setImageResource(R.drawable.bookmark_fill)\n            } else {\n                bookmarkImage.setImageResource(R.drawable.bookmark_2)\n            }\n        }\n\n\n\n\n        favoriteImage.setOnClickListener {\n            if (serverThumbnailPhotoModel.isLike) { // 좋아요 해제\n                CoroutineScope(Dispatchers.Main).launch {\n                    favoriteImage.setImageResource(R.drawable.favorite_2)\n                }\n                serverThumbnailPhotoModel.isLike = false\n                CoroutineScope(Dispatchers.IO).launch {\n                    mSocket!!.emit(\n                        \"clickLike\",\n                        roomAddress,\n                        adapterPosition,\n                        serverThumbnailPhotoModel.pictureowner,\n                        0\n                    )\n                }\n\n            } else { // 좋아요 눌렀을때\n                CoroutineScope(Dispatchers.Main).launch {\n                    favoriteImage.setImageResource(R.drawable.favorite_fill)\n                }\n                serverThumbnailPhotoModel.isLike = true\n                CoroutineScope(Dispatchers.IO).launch {\n                    mSocket!!.emit(\n                        \"clickLike\",\n                        roomAddress,\n                        adapterPosition,\n                        serverThumbnailPhotoModel.pictureowner,\n                        1\n                    )\n                }\n            }\n        }\n\n        bookmarkImage.setOnClickListener {\n            CoroutineScope(Dispatchers.Main).launch {\n                if (serverThumbnailPhotoModel.isPicked) {\n                    bookmarkImage.setImageResource(R.drawable.bookmark_2)\n                    serverThumbnailPhotoModel.isPicked = false\n                    photoPickedUriList.remove(serverThumbnailPhotoModel.thumbnailPhoto!!)\n                    photoPickedList.remove(serverThumbnailPhotoModel)\n                    serverFilePathList.add(serverThumbnailPhotoModel.absolutePath!!)\n                } else {\n                    bookmarkImage.setImageResource(R.drawable.bookmark_fill)\n                    serverThumbnailPhotoModel.isPicked = true\n                    photoPickedUriList.add(serverThumbnailPhotoModel.thumbnailPhoto!!)\n                    photoPickedList.add(serverThumbnailPhotoModel)\n                    serverFilePathList.remove(serverThumbnailPhotoModel.absolutePath!!)\n                }\n                serverDrawerPickAdapter.notifyDataSetChanged()\n            }\n        }\n\n        maxImage.setOnClickListener {\n            var intent = Intent(App.instance, ServerPhotoEnlargeActivity::class.java)\n            intent.putExtra(\"uri\", serverThumbnailPhotoModel.thumbnailPhoto.toString())\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n            App.instance.startActivity(intent)\n        }\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pic_pho/PhotoRoomServer/ViewPager/ServerPhotoRoomPagerViewHolder.kt	(revision cd8d73175f437d7ba1148f2857d784ed2c2480ea)
+++ app/src/main/java/com/example/pic_pho/PhotoRoomServer/ViewPager/ServerPhotoRoomPagerViewHolder.kt	(date 1617976334000)
@@ -7,6 +7,7 @@
 import com.bumptech.glide.Glide
 import com.example.pic_pho.App
 import com.example.pic_pho.CellularSocket.SocketUtil.Companion.mSocket
+import com.example.pic_pho.ImageHandler.ImageHandler.Companion.getOrientationOfImage
 import com.example.pic_pho.PhotoRoomServer.ServerPhotoEnlargeActivity
 import com.example.pic_pho.PhotoRoomServer.ServerPhotoRoomActivity
 import com.example.pic_pho.PhotoRoomServer.ServerPhotoRoomActivity.Companion.photoPickedList
@@ -124,8 +125,17 @@
         }
 
         maxImage.setOnClickListener {
+
+            var imagepath = serverThumbnailPhotoModel.thumbnailPhoto!!.getPath();
+            var orientation =getOrientationOfImage(imagepath)
+            if(orientation==-1){
+                orientation =0
+            }
+            Log.d("orientation", "bindWithView: ${orientation}")
+
             var intent = Intent(App.instance, ServerPhotoEnlargeActivity::class.java)
             intent.putExtra("uri", serverThumbnailPhotoModel.thumbnailPhoto.toString())
+            intent.putExtra("orientation", orientation)
             intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
             App.instance.startActivity(intent)
         }
Index: app/src/main/java/com/example/pic_pho/PhotoRoomServer/ServerPhotoEnlargeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pic_pho.PhotoRoomServer\n\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.net.toUri\nimport com.davemorrissey.labs.subscaleview.ImageSource\nimport com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView\nimport com.example.pic_pho.databinding.ActivityEnlargePhotoBinding\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\n\nclass ServerPhotoEnlargeActivity : AppCompatActivity() {\n\n    private lateinit var binding: ActivityEnlargePhotoBinding\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityEnlargePhotoBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        var intent = intent\n\n        binding.imageViewQuitEnlargePhoto.setOnClickListener {\n            finish()\n        }\n\n        var imagepath = intent.getStringExtra(\"uri\")\n\n        CoroutineScope(Dispatchers.Main).launch {\n            binding.imageViewEnlargePhoto.orientation = SubsamplingScaleImageView.ORIENTATION_USE_EXIF\n            binding.imageViewEnlargePhoto.setImage(ImageSource.uri(imagepath.toUri()))\n        }\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n        finish()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pic_pho/PhotoRoomServer/ServerPhotoEnlargeActivity.kt	(revision cd8d73175f437d7ba1148f2857d784ed2c2480ea)
+++ app/src/main/java/com/example/pic_pho/PhotoRoomServer/ServerPhotoEnlargeActivity.kt	(date 1617975808000)
@@ -1,6 +1,7 @@
 package com.example.pic_pho.PhotoRoomServer
 
 import android.os.Bundle
+import android.util.Log
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.net.toUri
 import com.davemorrissey.labs.subscaleview.ImageSource
@@ -9,6 +10,7 @@
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.launch
+import kotlin.math.log
 
 class ServerPhotoEnlargeActivity : AppCompatActivity() {
 
@@ -26,7 +28,9 @@
         }
 
         var imagepath = intent.getStringExtra("uri")
-
+        var orientation = intent.getStringExtra("orientation")
+        Log.d("orientation", "SubsamplingScaleImageView.ORIENTATION_USE_EXIF: ${SubsamplingScaleImageView.ORIENTATION_USE_EXIF}")
+        Log.d("orientation", "orientation: ${orientation}")
         CoroutineScope(Dispatchers.Main).launch {
             binding.imageViewEnlargePhoto.orientation = SubsamplingScaleImageView.ORIENTATION_USE_EXIF
             binding.imageViewEnlargePhoto.setImage(ImageSource.uri(imagepath.toUri()))
Index: app/src/main/java/com/example/pic_pho/CellularSocket/SocketUtil.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pic_pho.CellularSocket\n\nimport android.util.Log\nimport com.github.nkzawa.socketio.client.IO.socket\nimport com.github.nkzawa.socketio.client.Socket\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.runBlocking\nimport java.net.URISyntaxException\n\nclass SocketUtil {\n    companion object {\n        private val TAG = \"SocketUtil\"\n        var mSocket: Socket? = null\n        fun createAndConnectSocket(): Socket? {\n            return try {\n                mSocket = socket(\"http://52.78.242.130:5000/\") //영동\n//                mSocket = socket(\"http://3.35.138.31:5000/\") //새힘\n//                mSocket = socket(\"http://13.125.236.83:5000/\") //정훈\n                Log.d(TAG, \"createAndConnectSocket: inSocketUtil\")\n                runBlocking {\n                    CoroutineScope(Dispatchers.IO).launch {\n                        Log.d(TAG, \"createAndConnectSocket: Coroutine launch\")\n                        mSocket!!.connect()\n                    }.join()\n                }\n                Log.d(TAG, \"createAndConnectSocket: success\")\n                mSocket\n            } catch (e: URISyntaxException) {\n                Log.d(TAG, \"failed\")\n                null\n            }\n        }\n\n        fun getSocket() : Socket{\n            return mSocket!!\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pic_pho/CellularSocket/SocketUtil.kt	(revision cd8d73175f437d7ba1148f2857d784ed2c2480ea)
+++ app/src/main/java/com/example/pic_pho/CellularSocket/SocketUtil.kt	(date 1617964955000)
@@ -36,5 +36,6 @@
         fun getSocket() : Socket{
             return mSocket!!
         }
+
     }
 }
\ No newline at end of file
