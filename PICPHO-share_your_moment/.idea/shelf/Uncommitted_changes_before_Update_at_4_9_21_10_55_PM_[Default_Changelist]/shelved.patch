Index: app/src/main/java/com/example/pic_pho/MakeGroup/MakeGroupActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pic_pho.MakeGroup\n\nimport android.app.Activity\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.pic_pho.App\nimport com.example.pic_pho.CellularSocket.SocketUtil.Companion.createAndConnectSocket\nimport com.example.pic_pho.CellularSocket.SocketUtil.Companion.mSocket\nimport com.example.pic_pho.MakeGroup.selectedFriends.SelectedFriendsModel\nimport com.example.pic_pho.MakeGroup.selectedFriends.SelectedFriendsRecyclerAdapter\nimport com.example.pic_pho.MakeGroup.selectedFriends.SelectedFriendsRecyclerViewInterface\nimport com.example.pic_pho.WaitingRoomServer.ServerWaitingRoomActivity\nimport com.example.pic_pho.WifiDirect.UI.HorizontalItemDecoration\nimport com.example.pic_pho.databinding.ActivityMakeGroupBinding\nimport com.github.nkzawa.emitter.Emitter\nimport com.google.firebase.iid.FirebaseInstanceId\nimport com.google.gson.Gson\nimport com.google.gson.JsonArray\nimport com.google.gson.JsonObject\nimport com.kakao.sdk.talk.TalkApiClient\nimport com.kakao.sdk.user.UserApiClient\nimport kotlinx.android.synthetic.main.activity_lobby.*\nimport kotlinx.android.synthetic.main.activity_login.*\nimport kotlinx.android.synthetic.main.activity_make_group.*\nimport kotlinx.android.synthetic.main.activity_photoroom.*\nimport kotlinx.android.synthetic.main.item_make_group_recycler.*\nimport kotlinx.android.synthetic.main.item_selected_friends.*\nimport kotlinx.coroutines.*\nimport org.json.JSONArray\nimport java.net.URISyntaxException\n\n\nclass MakeGroupActivity : AppCompatActivity(),\n    MakeGroupRecyclerViewInterface, SelectedFriendsRecyclerViewInterface {\n\n    val TAG: String = \"로그\"\n    lateinit var binding: ActivityMakeGroupBinding\n\n    var makeGroupModelList = ArrayList<MakeGroupModel>()\n\n    private lateinit var makeGroupRecyclerAdapter: MakeGroupRecyclerAdapter\n\n    companion object {\n        lateinit var invitedFriendsJsonArray: JsonArray\n\n        var selectedFriends: RecyclerView? = null\n\n        var selectedFriendsModelList = ArrayList<SelectedFriendsModel>()\n        lateinit var selectedFriendsRecyclerAdapter: SelectedFriendsRecyclerAdapter\n\n        //수정(jsonObject없이 수정)\n        var selectedFriendsList = ArrayList<MakeGroupModel>()\n        var makeGroupActivity: Activity? = null\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        makeGroupActivity = this\n\n        binding = ActivityMakeGroupBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        selectedFriends = binding.selectedFriends\n\n        if (mSocket == null) {\n            Log.d(TAG, \"onCreate: 온크리에이트에서 소켓 연결 시도 함 ㅋㅋ\")\n            mSocket = createAndConnectSocket()\n        }\n\n        CoroutineScope(Dispatchers.IO).launch {\n            mSocket!!.on(\"kakaoFriendsOnlineReturn\", parseMakeGroupModelList)\n            delay(200)\n        }\n\n        selectedFriendsModelList.clear()\n        selectedFriendsList.clear()\n        makeGroupModelList.clear()\n\n        //어댑터 인스턴스 생성\n        makeGroupRecyclerAdapter = MakeGroupRecyclerAdapter(this)\n        makeGroupRecyclerAdapter.submitList(makeGroupModelList)\n\n        binding.friendList.apply {\n            layoutManager =\n                LinearLayoutManager(\n                    this@MakeGroupActivity,\n                    LinearLayoutManager.VERTICAL,\n                    false\n                )\n            adapter = makeGroupRecyclerAdapter\n        }\n\n\n        //selectedFriends 어댑터 인스턴스 생성\n        selectedFriendsRecyclerAdapter = SelectedFriendsRecyclerAdapter(this)\n        selectedFriendsRecyclerAdapter.submitList(selectedFriendsModelList)\n        update_selectedFriends_recyclerview()\n\n\n\n\n\n\n\n//\n//        binding.searchviewMakegroup.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\n//            override fun onQueryTextSubmit(p0: String?): Boolean {\n//                return true\n//            }\n//\n//            override fun onQueryTextChange(p0: String?): Boolean {\n//                binding.textTestSearchView.text = p0\n//                return true\n//            }\n//\n//        })\n    }\n\n    override fun onResume() {\n        super.onResume()\n        if (mSocket == null) {\n            Log.d(TAG, \"onResume: 온리줌에서 소켓 연결 시도 함 ㅋㅋ\")\n            mSocket = createAndConnectSocket()\n        }\n\n        makeGroupModelList.clear()\n\n\n        TalkApiClient.instance.friends { friends, error ->\n            if (error != null) {\n                Log.e(TAG, \"카카오톡 친구 목록 가져오기 실패\", error)\n            } else if (friends != null) {\n                Log.i(TAG, \"카카오톡 친구 목록 가져오기 성공 \\n${friends.elements.joinToString(\"\\n\")}\")\n                // 친구의 UUID 로 메시지 보내기 가능\n\n                var kakaoFriendsList = JSONArray()\n\n                for (i in 0 until friends.elements.size) {\n                    var kakaoFriend = JsonObject()\n                    kakaoFriend.apply {\n                        addProperty(\"name\", friends.elements[i].profileNickname)\n                        addProperty(\n                            \"profileImage\",\n                            friends.elements[i].profileThumbnailImage.toString()\n                        )\n                        addProperty(\"userId\", friends.elements[i].id.toInt())\n                    }\n                    kakaoFriendsList.put(kakaoFriend)\n                }\n\n\n                mSocket!!.emit(\"CheckFriendsOnline\", kakaoFriendsList.toString())\n            }\n        }\n\n\n    }\n\n    var parseMakeGroupModelList = Emitter.Listener {\n        Log.d(TAG, \"dfsfadsfadsfdas: asdfadsadfsasdfadfsafds왜왜애애애ㅙ애애ㅙ왱\")\n        var kakaoFriendsList = it[0].toString()\n        var jsonArray = JSONArray(kakaoFriendsList)\n        val gson = Gson()\n        for (i in 0 until jsonArray.length()) {\n            var groupModel = gson.fromJson(jsonArray[i].toString(), MakeGroupModel::class.java)\n            makeGroupModelList.add(groupModel)\n            Log.e(TAG, \"parseMakeGroupModelList: ${groupModel}\")\n        }\n        CoroutineScope(Dispatchers.Main).launch {\n            makeGroupRecyclerAdapter.notifyDataSetChanged()\n        }\n    }\n\n    fun update_selectedFriends_recyclerview() {\n\n        binding.selectedFriends.apply {\n\n            layoutManager =\n                LinearLayoutManager(\n                    this@MakeGroupActivity,\n                    LinearLayoutManager.HORIZONTAL,\n                    false\n                )\n            adapter = selectedFriendsRecyclerAdapter\n            addItemDecoration(HorizontalItemDecoration(20))\n        }\n    }\n\n    fun sendAlarm(view: View) {\n        try {\n\n            mSocket = createAndConnectSocket()\n            mSocket!!.emit(\"push_send\", 1)\n\n            val token = FirebaseInstanceId.getInstance().token\n            Log.e(TAG, \"token: ${token}\")\n\n        } catch (e: URISyntaxException) {\n            Log.d(TAG, \"failed\")\n        }\n    }\n\n    fun activityfinish(view: View) {\n        finish()\n    }\n\n\n    //function for finish action\n    fun makeGroupAction(view: View) {\n        //그룹방 이름 받아오기\n        val roomName = binding.edittextRoomname.text.toString()\n        Log.e(TAG, \"그룹방 이름: ${roomName}\")\n\n        if (roomName.isEmpty()) {\n            //방 이름이 공백일 때!\n            Toast.makeText(\n                App.instance,\n                \"방 이름을 입력해주세요.\",\n                Toast.LENGTH_SHORT\n            ).show()\n\n            return\n        }\n        //디버깅용\n        else {\n            //방 이름이 있을 때!\n\n            Toast.makeText(\n                App.instance,\n                \"그룹만들기!!\",//\"클릭됨!! ${this.modelList[position].name}\",\n                Toast.LENGTH_SHORT\n            ).show()\n        }\n\n\n        //TODO 본인 정보도 포함 시켜서 보내야함\n\n        if (mSocket != null) {\n            invitedFriendsJsonArray = JsonArray()\n            for (i in 0 until makeGroupModelList.size) {\n                if (makeGroupModelList[i].isSelected == true) {\n                    var jsonobject: JsonObject? = JsonObject()\n                    jsonobject!!.addProperty(\"userid\", makeGroupModelList[i].userId.toString())\n                    jsonobject!!.addProperty(\"name\", makeGroupModelList[i].name.toString())\n                    jsonobject!!.addProperty(\n                        \"profileImage\",\n                        makeGroupModelList[i].profileImage.toString()\n                    )\n                    jsonobject!!.addProperty(\"roomName\", roomName)\n                    invitedFriendsJsonArray.add(jsonobject)\n\n                    selectedFriendsList.add(makeGroupModelList[i])\n                }\n            }\n\n\n            UserApiClient.instance.me { user, error ->\n                if (error != null) {\n                    Log.e(TAG, \"사용자 정보 요청 실패\", error)\n                } else if (user != null) {\n                    Log.i(TAG, \"사용자 정보 요청 성공\")\n                    Log.d(\"jsonobject\", \"makeGroupAction: ${invitedFriendsJsonArray}\")\n                    mSocket!!.emit(\n                        \"selectedGroup\",\n                        invitedFriendsJsonArray,\n                        \"picpho\" + user.id.toString(),\n                        roomName\n                    )\n\n                    var roomAddr: String = \"picpho\" + user.id.toString()\n                    val intent: Intent = Intent(this, ServerWaitingRoomActivity::class.java)\n                    intent.putExtra(\"roomAddress\", roomAddr)\n                    intent.putExtra(\"invitedFriendsJsonArray\", invitedFriendsJsonArray.toString())\n                    intent.putExtra(\"isHost\", true)\n                    intent.putExtra(\"test\", \"makeroom\")\n                    intent.putExtra(\"roomName\", roomName)\n\n                    Log.e(\"로그\", intent.getStringExtra(\"roomAddress\"))\n                    Log.d(\"로그\", \"makeGroupAction: ${selectedFriendsModelList.size}\")\n\n                    startActivity(intent)\n                }\n            }\n        } else {\n            Log.d(TAG, \"makeGroupAction: socket null\")\n        }\n    }\n\n    override fun onBackPressed() {\n        finish()\n    }\n\n    override fun onItemClicked() {\n    }\n\n    override fun onDestroy() {\n        selectedFriendsModelList.clear()\n        selectedFriendsList.clear()\n        makeGroupModelList.clear()\n        super.onDestroy()\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pic_pho/MakeGroup/MakeGroupActivity.kt	(revision cd8d73175f437d7ba1148f2857d784ed2c2480ea)
+++ app/src/main/java/com/example/pic_pho/MakeGroup/MakeGroupActivity.kt	(date 1617963839000)
@@ -128,7 +128,7 @@
             mSocket = createAndConnectSocket()
         }
 
-        makeGroupModelList.clear()
+
 
 
         TalkApiClient.instance.friends { friends, error ->
@@ -163,6 +163,9 @@
 
     var parseMakeGroupModelList = Emitter.Listener {
         Log.d(TAG, "dfsfadsfadsfdas: asdfadsadfsasdfadfsafds왜왜애애애ㅙ애애ㅙ왱")
+
+        makeGroupModelList.clear()
+
         var kakaoFriendsList = it[0].toString()
         var jsonArray = JSONArray(kakaoFriendsList)
         val gson = Gson()
