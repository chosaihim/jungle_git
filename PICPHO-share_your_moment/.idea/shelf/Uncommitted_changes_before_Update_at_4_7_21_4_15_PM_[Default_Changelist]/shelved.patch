Index: app/src/main/java/com/example/pic_pho/WaitingRoomServer/ServerWaitingRoomActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pic_pho.WaitingRoomServer\n\nimport android.app.Dialog\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.graphics.Color\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.Gravity\nimport android.view.View\nimport android.widget.TextView\nimport androidx.annotation.RequiresApi\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.exifinterface.media.ExifInterface\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.pic_pho.App\nimport com.example.pic_pho.CellularSocket.SocketUtil\nimport com.example.pic_pho.CellularSocket.SocketUtil.Companion.mSocket\nimport com.example.pic_pho.ImageHandler.ImageHandler\nimport com.example.pic_pho.MakeGroup.MakeGroupActivity\nimport com.example.pic_pho.PhotoRoomServer.FileUtil\nimport com.example.pic_pho.PhotoRoomServer.FriendsPhotoCountModel\nimport com.example.pic_pho.PhotoRoomServer.ServerPhotoRoomActivity\nimport com.example.pic_pho.PhotoRoomServer.ServerThumbnailPhotoModel\nimport com.example.pic_pho.R\nimport com.example.pic_pho.databinding.ActivityWaitingRoomServerBinding\nimport com.github.nkzawa.emitter.Emitter\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport com.kakao.sdk.user.UserApiClient\nimport com.snatik.storage.Storage\nimport id.zelory.compressor.Compressor\nimport id.zelory.compressor.constraint.format\nimport id.zelory.compressor.constraint.quality\nimport id.zelory.compressor.loadBitmap\nimport kotlinx.android.synthetic.main.activity_waiting_room_server.*\nimport kotlinx.android.synthetic.main.item_waiting_room_server.*\nimport kotlinx.coroutines.*\nimport org.json.JSONArray\nimport java.io.File\n\nclass ServerWaitingRoomActivity : AppCompatActivity(), ServerWaitingRoomInterface {\n\n    data class GroupMember(\n        val UserID: String,\n        val NickName: String,\n        val ProfileUrl: String,\n        val IsHost: Boolean,\n        var status: Int\n    )\n\n\n    private lateinit var binding: ActivityWaitingRoomServerBinding\n    private val TAG = \"서버대기방\"\n\n    private lateinit var serverWaitingRoomAdapter: ServerWaitingRoomAdapter\n    var invitedFriendsList = ArrayList<GroupMember>()\n    var infoOfUser: JsonObject? = null\n    var numOfMyPhoto: Int = 0\n    private var actualImage: File? = null\n    lateinit var exif: ExifInterface\n    private var compressedImage: File? = null\n    var roomAddr: String? = null\n    var roomName: String? = null\n    private var dialog: Dialog? = null\n\n    var returnedImage: Bitmap? = null\n\n    // 총 내가 받은 사진 개수\n    var numOfReceivedPhoto: Int = 0\n\n    // 친구들이 사진을 다 보냈는지 확인하는 어레이 리스트\n    var friendsCount: Int = 0\n    var receivedFriendsCount: Int = 0\n    var friendsPhotoCountList: MutableMap<String, FriendsPhotoCountModel> = mutableMapOf()\n\n    companion object {\n        val photoModelList = ArrayList<ServerThumbnailPhotoModel>()\n        var myKakaoId: String? = null\n\n        // 서버에서 삭제를 위한 storage 정의\n        var serverStorage: Storage? = null\n        var serverFilePathList = ArrayList<String>()\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityWaitingRoomServerBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n\n\n        Log.d(TAG, \"onCreate: 서버 웨이팅 룸\")\n        dialog?.dismiss()\n\n        mSocket = if (mSocket == null)\n            SocketUtil.createAndConnectSocket()\n        else\n            SocketUtil.getSocket()\n\n        runBlocking {\n            CoroutineScope(Dispatchers.IO).launch {\n                //note 4. 모든 사람들이 들어온 경우 사진을 선택할수있게 한다.\n                mSocket!!.on(\"DoSelectPhoto\", DoSelectPhoto)\n                //note 7. 서버는 클라이언트가 보내는 사진을 전송\n                mSocket!!.on(\"SendPictureFromServer\", imageReturn)\n                mSocket!!.on(\"enterMember\", showEnteredMember)\n                mSocket!!.on(\"startPhotoRoom\", startPhotoRoom)\n                delay(100)\n            }.join()\n        }\n\n        serverWaitingRoomAdapter = ServerWaitingRoomAdapter(this)\n        serverWaitingRoomAdapter.submitList(invitedFriendsList)\n        binding.waitingMemberRecyclerview.apply {\n            layoutManager = LinearLayoutManager(\n                this@ServerWaitingRoomActivity,\n                LinearLayoutManager.VERTICAL,\n                false\n            )\n            adapter = serverWaitingRoomAdapter\n        }\n\n        // 삭제를 위한 storage init\n        serverStorage = Storage(applicationContext)\n\n        //note 대기방으로 넘어오는 경우\n        //note 1. 주소획득\n        Log.d(TAG, \"gogogogogogogo: \")\n        roomAddr = getIntent().getStringExtra(\"roomAddress\")\n        roomName = getIntent().getStringExtra(\"roomName\")\n        var ishost = getIntent().getBooleanExtra(\"isHost\", false)\n        var jsonobjectlist = getIntent().getSerializableExtra(\"invitedFriendsJsonArray\")\n\n        // note 1-1. 만약 호스트라면 강제시작, 다시 초대 버튼 활성화 시켜주기\n        if (ishost) {\n            binding.buttonReinvite.visibility = View.VISIBLE\n            binding.buttonForceStart.visibility = View.VISIBLE\n        }\n\n\n        Log.d(TAG, \"invitedFriendsJsonArray: ${jsonobjectlist}, roomAddress is $roomAddr\")\n        //note 2. 서버에 접속\n        //mSocket = SocketUtil.createAndConnectSocket()\n//        mSocket = SocketUtil.getSocket()\n//        mSocket!!.on(\"enterMember\", showEnteredMember)\n//        //note 4. 모든 사람들이 들어온 경우 사진을 선택할수있게 한다.\n//        mSocket!!.on(\"DoSelectPhoto\", DoSelectPhoto)\n//        //note 7. 서버는 클라이언트가 보내는 사진을 전송\n//        mSocket!!.on(\"SendPictureFromServer\", imageReturn)\n//\n//        mSocket!!.connect()\n\n//\n//        runBlocking {\n//            CoroutineScope(Dispatchers.IO).launch {\n//                //note 리스너는 앞쪽에 배치\n//                //note 3.2 들어오는 사람들을 리사이클러뷰에 표시한다.\n\n//            }.join()\n//        }\n\n\n        Log.d(TAG, \"onCreate: ${roomAddr}\")\n        Log.d(TAG, \"ishost: ${ishost}\")\n        if (roomAddr != null) {\n            //note 3. 서버에 접속 성공하면, 클라이언트는 서버로 자신의 정보를 보내고, 서버는 접속 정보를 모든 방에 접속한 사람들에게 보냄\n            if (mSocket != null) {\n                //note 3.1 보내야 하는 정보는 userId = model.userId, name = model.name, profileImage = model.profileImage\n                UserApiClient.instance.me { user, error ->\n                    if (error != null) {\n                        Log.e(TAG, \"사용자 정보 요청 실패\", error)\n                        infoOfUser = null\n                    } else if (user != null) {\n                        Log.d(TAG, \"enterToWaitingroomWithInvitation\")\n                        infoOfUser = JsonObject()\n                        infoOfUser!!.addProperty(\"UserID\", user.id.toString())\n                        myKakaoId = user.id.toString()\n                        infoOfUser!!.addProperty(\n                            \"NickName\",\n                            user.kakaoAccount?.profile?.nickname.toString()\n                        )\n                        infoOfUser!!.addProperty(\n                            \"ProfileImg\",\n                            user.kakaoAccount?.profile?.profileImageUrl.toString()\n                        )\n                        Log.d(TAG, \"getUserInfo11: ${infoOfUser}\")\n                        if (ishost) {\n                            infoOfUser!!.addProperty(\"IsHost\", \"True\")\n                            infoOfUser!!.addProperty(\"roomName\", roomName)\n                            Log.d(\n                                TAG,\n                                \"onCreate: before emit host room Addr $roomAddr, infoOfUser $infoOfUser, size is ${MakeGroupActivity.invitedFriendsJsonArray.size()}\"\n                            )\n                            mSocket!!.emit(\n                                \"enterRoom\",\n                                roomAddr,\n                                infoOfUser,\n                                MakeGroupActivity.invitedFriendsJsonArray.size()\n                            )\n                        } else {\n                            infoOfUser!!.addProperty(\"IsHost\", \"False\")\n                            Log.d(\n                                TAG,\n                                \"onCreate: before emit client room Addr $roomAddr, infoOfUser is $infoOfUser\"\n                            )\n                            mSocket!!.emit(\"enterRoom\", roomAddr, infoOfUser, 0)\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //note 8. 클라이언트는 서버로 부터 받는 진행상황을 모두 실시간으로 업데이트\n\n        //note 9. 모든 사진이 받아지면 포토룸으로 이동\n\n\n        //note 리사이클러 뷰에 대한 내용\n        //note 사진 선택 클릭되면 선택 시 정보를 서버로 보냄.\n        binding.serverChoosePhotoCardview.setOnClickListener {\n            var intent = ImageHandler.selectPhoto()\n\n            wifi_progress_cloud_imageview.visibility = View.INVISIBLE\n            wifi_progress_cloud_ing_imageview.visibility = View.VISIBLE\n            var userid: String? = null\n\n            UserApiClient.instance.me { user, error ->\n                if (error != null) {\n                    userid = null\n                } else if (user != null) {\n                    userid = user.id.toString()\n                }\n\n            }\n            Log.d(TAG, \"onCreate: ${userid}\")\n            mSocket!!.emit(\"selectStatus\", 1, roomAddr, infoOfUser)\n            //serverWaitingRoomAdapter.modelList[0].status = 1\n\n            startActivityForResult(intent, 100)\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        Log.d(TAG, \"onResume: 서버 웨이팅 룸\")\n\n\n    }\n\n    override fun onItemClicked() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        Log.d(TAG, \"onDestroy: 서버 웨이팅 룸\")\n\n        dialog?.dismiss()\n    }\n\n    override fun onBackPressed() {\n//        super.onBackPressed()\n//        mSocket!!.disconnect()\n\n        runBlocking {\n            CoroutineScope(Dispatchers.Main).launch {\n                dialog =\n                    ServerPhotoRoomActivity.showDialog(\n                        context = this@ServerWaitingRoomActivity,\n                        resource = R.layout.dialog_leave_waitingroom,\n                        gravity = Gravity.CENTER,\n                        color = Color.TRANSPARENT\n                    )\n                dialog!!.findViewById<TextView>(R.id.button_leave).setOnClickListener {\n                    dialog?.dismiss()\n                    mSocket!!.disconnect()\n                    finish()\n                }\n                dialog!!.findViewById<TextView>(R.id.button_continue).setOnClickListener {\n                    dialog?.dismiss()\n                }\n            }\n        }\n    }\n\n    var startPhotoRoom = Emitter.Listener {\n        val intent = Intent(App.instance, ServerPhotoRoomActivity::class.java)\n        intent.putExtra(\"roomAddress\", roomAddr)\n        startActivity(intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP))\n        finish()\n    }\n\n\n    //note 5.1 사진 선택을 완료하면 선택완료 정보를 서버로 보냄,\n    //note 5.2 서버는 모든 송신 여부 정보를 방의 모든 클라이언트에게 송신\n    var showEnteredMember = Emitter.Listener {\n        Log.d(TAG, \"fnsadjfnaskdjfnadjks: fa뭐skdfnasjkfnasjkdfnkadjs\")\n        Log.d(TAG, \"it[0]: ${it[0]}\")\n        invitedFriendsList.clear()\n        var jsonArray: JSONArray = JSONArray(it[0].toString())\n        var gson = Gson()\n        friendsCount = jsonArray.length() - 1\n        for (i in 0 until jsonArray.length()) {\n            var jsonstring = jsonArray.get(i).toString()\n            var member = gson.fromJson(jsonstring, GroupMember::class.java)\n\n            Log.d(TAG, \"member.UserID: ${member.UserID},myKakaoId is $myKakaoId\")\n\n            if (member.UserID != myKakaoId)\n                friendsPhotoCountList[member.UserID] = FriendsPhotoCountModel()\n            invitedFriendsList.add(member)\n        }\n        runBlocking {\n            CoroutineScope(Dispatchers.Main).launch {\n                serverWaitingRoomAdapter.notifyDataSetChanged()\n            }.join()\n        }\n    }\n\n\n    var DoSelectPhoto = Emitter.Listener {\n        CoroutineScope(Dispatchers.Main).launch {\n            server_choose_photo_cardview.visibility = View.VISIBLE\n        }\n\n    }\n\n\n    //note 6. 사진을 모든 클라이언트가 사진을 선택한 경우 사진을 서버로 보냄\n    @RequiresApi(Build.VERSION_CODES.Q)\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        when (requestCode) {\n            100 -> {\n                var userName: String? = null\n                var userImage: String? = null\n                var pictureowner: String = myKakaoId!!\n\n                UserApiClient.instance.me { user, error ->\n                    if (error != null) {\n                        Log.e(TAG, \"사용자 정보 요청 실패\", error)\n                        userName = null\n                        userImage = null\n                    } else if (user != null) {\n                        userName = user.kakaoAccount?.profile?.nickname.toString()\n                        userImage = user.kakaoAccount?.profile?.profileImageUrl.toString()\n                        Log.d(\n                            TAG, \"user.kakaoAccount?.profile?.nickname.toString()\" +\n                                    \"${user.kakaoAccount?.profile?.nickname.toString()}\" +\n                                    \"${user.kakaoAccount?.profile?.profileImageUrl.toString()}\" +\n                                    \"onActivityResult: pictureowner $pictureowner\"\n                        )\n                    }\n                }\n                if (data != null) {\n\n                    if (data.clipData != null) {\n                        val count = data.clipData!!.itemCount\n\n                        //내가 가져온 사진 개수 저장\n                        numOfMyPhoto = count\n\n                        for (i in 0 until count) {\n                            var imageUri = data.clipData!!.getItemAt(i).uri\n                            var taketime: String? = null\n\n                            var absolutePath: String =\n                                ImageHandler.getFullPathFromUri(this, imageUri)!!\n\n                            serverFilePathList.add(\n                                absolutePath\n                            )\n                            actualImage = FileUtil.from(App.instance, imageUri)\n\n\n                            //메타정보추출하기\n                            exif = ExifInterface(actualImage!!)\n                            if (exif != null) {\n                                taketime = exif.getAttribute(ExifInterface.TAG_DATETIME).toString()\n                            }\n                            //압축하기\n                            runBlocking {\n                                compressedImage = compressImage(actualImage!!)\n                            }\n\n                            //modelList에 넣어두기\n                            var photoinfo = ServerThumbnailPhotoModel(\n                                imageUri,\n                                taketime,\n                                pictureowner,\n                                i,\n                                count,\n                                userName,\n                                userImage,\n                                absolutePath = absolutePath\n                            )\n\n                            photoModelList.add(photoinfo)\n\n                            CoroutineScope(Dispatchers.IO).launch {\n//                        //압축한 파일 보내기\n                                var image_string =\n                                    ImageHandler.bitmapToString(loadBitmap(compressedImage!!))\n                                mSocket!!.emit(\n                                    \"SendPictureFromClient\",\n                                    image_string,\n                                    roomAddr,\n                                    taketime,\n                                    pictureowner,\n                                    i,\n                                    count,\n                                    userName,\n                                    userImage\n                                )\n                            }\n\n                        }\n                    } else { // 사진을 한장만 선택했을 경우\n                        val imageUri = data.data\n                        var taketime: String? = null\n                        var absolutePath: String = ImageHandler.getFullPathFromUri(this, imageUri)!!\n                        // 절대경로 추가\n                        serverFilePathList.add(\n                            absolutePath\n                        )\n\n                        actualImage = FileUtil.from(App.instance, imageUri!!)\n\n                        exif = ExifInterface(actualImage!!)\n                        if (exif != null) {\n                            taketime = exif.getAttribute(ExifInterface.TAG_DATETIME).toString()\n                        }\n\n                        //압축하기\n                        runBlocking {\n                            compressedImage = compressImage(actualImage!!)\n                        }\n\n\n                        CoroutineScope(Dispatchers.IO).launch {\n                            var photoinfo = ServerThumbnailPhotoModel(\n                                imageUri,\n                                taketime,\n                                pictureowner,\n                                0,\n                                1,\n                                username = userName,\n                                userimg = userImage,\n                                absolutePath = absolutePath\n                            )\n                            Log.d(TAG, \"onActivityResult: username $userName, userimg $userImage\")\n\n                            photoModelList.add(photoinfo)\n//                        //압축한 파일 보내기\n                            var image_string =\n                                ImageHandler.bitmapToString(loadBitmap(compressedImage!!))\n                            mSocket!!.emit(\n                                \"SendPictureFromClient\",\n                                image_string,\n                                roomAddr,\n                                taketime,\n                                pictureowner,\n                                0,\n                                1,\n                                userName,\n                                userImage\n                            )\n                        }\n                    }\n                }\n                mSocket!!.emit(\"selectStatus\", 2, roomAddr, infoOfUser)\n            }\n        }\n    }\n\n    fun compressImage(originalImage: File): File? {\n        var ResultImage: File? = null\n        runBlocking {\n            coroutineScope {\n                launch {\n                    // Default compression\n                    ResultImage =\n                        Compressor.compress(this@ServerWaitingRoomActivity, originalImage!!)\n                        {\n//                    resolution(1500, 1500)\n                            quality(95)\n                            format(Bitmap.CompressFormat.JPEG)\n//                    size(1_097_152) // 2 MB\n                        }\n                }\n            }.join()\n        }\n        return ResultImage\n    }\n\n    // 사진을 서버로부터 받는 곳!\n    var imageReturn = Emitter.Listener { it ->\n        var data = it[0].toString()\n        var receivedtaketime = it[1].toString()\n        var receivedowner = it[2].toString()\n        // 전체중에 몇장 오고있는지\n        var currentorder = it[3].toString()\n        // 그 사람이 보내야하는 전체 사진수\n        var totalcount = it[4].toString().toInt()\n        // 그룹전체가 보내는 전체 사진수\n        var sum_totalCount = it[5].toString()\n        // 네명다 사진을 보내기 시작했는지??\n        var is_everyone = it[6].toString().toInt()\n        var username = it[7].toString()\n        var userimg = it[8].toString()\n        Log.d(TAG, \"username: $username,, userimg $userimg\")\n\n        Log.d(TAG, \"receivedowner: $receivedowner and myKakaoId is $myKakaoId\")\n\n        returnedImage = ImageHandler.convertString64ToImage(data)\n        runBlocking {\n            CoroutineScope(Dispatchers.Default).launch {\n\n                var filepath: String = \"/sdcard\" + \"/DCIM/Picpho_test/\"\n                var filename: String =\n                    \"Picpho_\" + System.currentTimeMillis().toString() + \".jpg\"\n//                \"Picpho_\" + receivedowner + \"_\" + System.currentTimeMillis().toString() + \".jpg\"\n                var fullFilePath: String = filepath + filename\n                // 절대 경로 저장\n                serverFilePathList.add(fullFilePath)\n\n                var file = File(fullFilePath)\n                // 디렉토리 존재하지 않으면 디렉토리 생성\n                val dirs = File(file.parent.toString())\n                if (!dirs.exists()) dirs.mkdirs()\n                ImageHandler.saveBitmapAsFile(\n                    returnedImage!!,\n                    file,\n                    receivedtaketime,\n                    receivedowner\n                )\n                ServerPhotoRoomActivity.scanFile(App.instance, file, \"jpg\")\n                //modelList에 넣어두기43\n//            var photoinfo = ServerThumbnailPhotoModel(Uri.fromFile(file!!))\n                var photoinfo = ServerThumbnailPhotoModel(\n                    Uri.fromFile(file),\n                    receivedtaketime,\n                    receivedowner,\n                    currentorder.toInt(),\n                    totalcount.toInt(),\n                    absolutePath = fullFilePath,\n                    username = username,\n                    userimg = userimg\n                )\n                photoModelList.add(photoinfo)\n                numOfReceivedPhoto++\n\n                Log.e(\n                    \"받은 사진\",\n                    \"${numOfReceivedPhoto} vs ${sum_totalCount.toInt() - numOfMyPhoto}\"\n                )\n                // 사진 싹 다 받았으면 한번 정렬해주기!\n            }.join()\n        }\n        Log.d(\n            TAG,\n            \"go to photoroom: ${numOfReceivedPhoto} || ${sum_totalCount.toInt()} || ${numOfMyPhoto}\"\n        )\n        friendsPhotoCountList[receivedowner]!!.goalPhotoCounts = totalcount\n        (friendsPhotoCountList[receivedowner]!!.receivedPhotoCounts)++\n\n        if (friendsPhotoCountList[receivedowner]!!.goalPhotoCounts\n            == friendsPhotoCountList[receivedowner]!!.receivedPhotoCounts\n        ) {\n            friendsPhotoCountList[receivedowner]!!.isDone = true\n            receivedFriendsCount++\n        }\n\n        // 다 받았는지 확인하는 로직\n        if (friendsCount == receivedFriendsCount) {\n            mSocket!!.emit(\"receivedAll\", myKakaoId, roomAddr)\n        }\n\n        //note sort\n        CoroutineScope(Dispatchers.Default).launch {\n            var sortedModelList =\n                photoModelList.sortedWith(compareBy({ it.taketime }, { it.pictureowner }))\n            photoModelList.clear()\n            photoModelList.addAll(sortedModelList)\n        }\n    }\n\n\n    //FIREBASE ALARM 파이어베이스 알람 다시 보내기\n    fun reInviteFriends(view: View) {\n        Log.d(TAG, \"ServerWaitingRoomActivity - reInviteFriends() called\")\n\n\n        var jsonObjectList = getIntent().getSerializableExtra(\"invitedFriendsJsonArray\")\n        Log.e(TAG, \"제이슨 오브젝트 리스트: ${jsonObjectList}\")\n\n        roomName = intent.getStringExtra(\"roomName\").toString()\n        Log.e(TAG, \"룸 네임: ${roomName}\")\n\n        mSocket!!.emit(\n            \"selectedGroup\",\n            MakeGroupActivity.invitedFriendsJsonArray, roomAddr, roomName\n        )\n    }\n\n    //친구들 다 안들어왔을 때도 강제로 시작하기\n    fun forcedStart(view: View) {\n        mSocket!!.emit(\"forcedStart\", roomAddr)\n    }\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pic_pho/WaitingRoomServer/ServerWaitingRoomActivity.kt	(revision 09924d7e7ada4317937da33f7b2e7a54d39fb9f3)
+++ app/src/main/java/com/example/pic_pho/WaitingRoomServer/ServerWaitingRoomActivity.kt	(date 1617724452000)
@@ -419,7 +419,8 @@
                             }
 
                         }
-                    } else { // 사진을 한장만 선택했을 경우
+                    }
+                    else { // 사진을 한장만 선택했을 경우
                         val imageUri = data.data
                         var taketime: String? = null
                         var absolutePath: String = ImageHandler.getFullPathFromUri(this, imageUri)!!
@@ -452,8 +453,6 @@
                                 userimg = userImage,
                                 absolutePath = absolutePath
                             )
-                            Log.d(TAG, "onActivityResult: username $userName, userimg $userImage")
-
                             photoModelList.add(photoinfo)
 //                        //압축한 파일 보내기
                             var image_string =
@@ -469,6 +468,8 @@
                                 userName,
                                 userImage
                             )
+                            Log.d(TAG, "onActivityResult: username $userName, userimg $userImage")
+
                         }
                     }
                 }
@@ -539,7 +540,7 @@
                     receivedowner
                 )
                 ServerPhotoRoomActivity.scanFile(App.instance, file, "jpg")
-                //modelList에 넣어두기43
+                //modelList에 넣어두기
 //            var photoinfo = ServerThumbnailPhotoModel(Uri.fromFile(file!!))
                 var photoinfo = ServerThumbnailPhotoModel(
                     Uri.fromFile(file),
