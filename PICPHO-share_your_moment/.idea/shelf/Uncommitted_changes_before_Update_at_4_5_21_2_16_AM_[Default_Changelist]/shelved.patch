Index: app/src/main/java/com/example/pic_pho/WaitingRoomServer/ServerWaitingRoomActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pic_pho.WaitingRoomServer\n\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.os.Build\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.provider.MediaStore\nimport android.provider.Settings\nimport android.util.Log\nimport android.view.View\nimport androidx.annotation.RequiresApi\nimport androidx.annotation.UiThread\nimport androidx.exifinterface.media.ExifInterface\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.pic_pho.App\nimport com.example.pic_pho.CellularSocket.SocketUtil\nimport com.example.pic_pho.ImageHandler.ImageHandler\nimport com.example.pic_pho.MakeGroup.MakeGroupActivity\nimport com.example.pic_pho.PhotoRoomServer.FileUtil\nimport com.example.pic_pho.PhotoRoomServer.ServerThumbnailPhotoModel\nimport com.example.pic_pho.WifiDirect.WaitingForOwnerActivity\nimport com.example.pic_pho.WifiDirect.WifiDirectMainActivity\nimport com.example.pic_pho.databinding.ActivityWaitingRoomServerBinding\nimport com.github.nkzawa.emitter.Emitter\nimport com.github.nkzawa.socketio.client.Socket\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport com.google.gson.JsonParser\nimport com.kakao.sdk.user.UserApiClient\nimport id.zelory.compressor.Compressor\nimport id.zelory.compressor.constraint.format\nimport id.zelory.compressor.constraint.quality\nimport id.zelory.compressor.loadBitmap\nimport kotlinx.android.synthetic.main.activity_waiting_room_server.*\nimport kotlinx.android.synthetic.main.item_waiting_room_server.*\nimport kotlinx.coroutines.*\nimport org.json.JSONArray\nimport kotlin.collections.ArrayList as ArrayList\nimport org.json.JSONObject\nimport java.io.File\nimport kotlin.math.log\nimport kotlin.reflect.typeOf\n\nclass ServerWaitingRoomActivity : AppCompatActivity(), ServerWaitingRoomInterface {\n\n    data class GroupMember(\n        val UserID: String,\n        val NickName: String,\n        val ProfileUrl: String,\n        val IsHost: Boolean,\n        var status: Int\n    )\n\n\n    private lateinit var binding: ActivityWaitingRoomServerBinding\n    private val TAG = \"서버대기방\"\n\n    private lateinit var serverWaitingRoomAdapter: ServerWaitingRoomAdapter\n    var invitedFriendsList = ArrayList<GroupMember>()\n    var mSocket: Socket? = null\n    var infoOfUser: JsonObject? = null\n    var numOfMyPhoto: Int = 0\n    private var actualImage: File? = null\n    lateinit var exif: ExifInterface\n    private var compressedImage: File? = null\n    private val photoModelList = ArrayList<ServerThumbnailPhotoModel>()\n    var roomAddr: String? = null\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityWaitingRoomServerBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        serverWaitingRoomAdapter = ServerWaitingRoomAdapter(this)\n        serverWaitingRoomAdapter.submitList(invitedFriendsList)\n        binding.waitingMemberRecyclerview.apply {\n            layoutManager = LinearLayoutManager(\n                this@ServerWaitingRoomActivity,\n                LinearLayoutManager.VERTICAL,\n                false\n            )\n            adapter = serverWaitingRoomAdapter\n        }\n\n        //note 대기방으로 넘어오는 경우\n        //note 1. 주소획득\n        roomAddr = getIntent().getStringExtra(\"roomAddress\")\n        var ishost = getIntent().getBooleanExtra(\"isHost\", false)\n        //note 2. 서버에 접속\n        mSocket = SocketUtil.createAndConnectSocket()\n\n        //note 리스너는 앞쪽에 배치\n        //note 3.2 들어오는 사람들을 리사이클러뷰에 표시한다.\n        mSocket!!.on(\"enterMember\", showEnteredMember)\n        //note 4. 모든 사람들이 들어온 경우 사진을 선택할수있게 한다.\n        mSocket!!.on(\"DoSelectPhoto\", DoSelectPhoto)\n\n        Log.d(TAG, \"ishost: ${ishost}\")\n        if (roomAddr != null) {\n\n            //note 3. 서버에 접속 성공하면, 클라이언트는 서버로 자신의 정보를 보내고, 서버는 접속 정보를 모든 방에 접속한 사람들에게 보냄\n            if (mSocket != null) {\n                //note 3.1 보내야 하는 정보는 userId = model.userId, name = model.name, profileImage = model.profileImage\n                UserApiClient.instance.me { user, error ->\n                    if (error != null) {\n                        Log.e(TAG, \"사용자 정보 요청 실패\", error)\n                        infoOfUser = null\n                    } else if (user != null) {\n                        Log.d(TAG, \"enterToWaitingroomWithInvitation\")\n                        infoOfUser = JsonObject()\n                        infoOfUser!!.addProperty(\"UserID\", user.id.toString())\n                        infoOfUser!!.addProperty(\n                            \"NickName\",\n                            user.kakaoAccount?.profile?.nickname.toString()\n                        )\n                        infoOfUser!!.addProperty(\n                            \"ProfileImg\",\n                            user.kakaoAccount?.profile?.profileImageUrl.toString()\n                        )\n                        Log.d(TAG, \"getUserInfo11: ${infoOfUser}\")\n                        if (ishost) {\n                            infoOfUser!!.addProperty(\"IsHost\", \"True\")\n                            mSocket!!.emit(\n                                \"enterRoom\",\n                                roomAddr,\n                                infoOfUser,\n                                MakeGroupActivity.jsonobjectlist.size()\n                            )\n                        } else {\n                            infoOfUser!!.addProperty(\"IsHost\", \"False\")\n                            mSocket!!.emit(\"enterRoom\", roomAddr, infoOfUser, null)\n                        }\n                    }\n                }\n\n\n            }\n        }\n\n\n        //note 5.2 서버는 모든 송신 여부 정보를 방의 모든 클라이언트에게 송신\n        //note 6. 사진을 모든 클라이언트가 사진을 선택한 경우 사진을 서버로 보냄\n\n\n        //note 7. 서버는 클라이언트가 최초 사진 전송이 완료 되는 순간 들어오는 모든 사진들을 전송\n\n        //note 8. 클라이언트는 서버로 부터 받는 진행상황을 모두 실시간으로 업데이트\n\n        //note 9. 모든 사진이 받아지면 포토룸으로 이동\n\n\n        //note 리사이클러 뷰에 대한 내용\n\n        //note 사진 선택 클릭되면 선택 시 정보를 서버로 보냄.\n        server_choose_photo_cardview!!.setOnClickListener {\n            var intent = ImageHandler.selectPhoto()\n\n            wifi_progress_cloud_imageview.visibility = View.INVISIBLE\n            wifi_progress_cloud_ing_imageview.visibility = View.VISIBLE\n            var userid: String? = null\n\n            UserApiClient.instance.me { user, error ->\n                if (error != null) {\n                    userid = null\n                } else if (user != null) {\n                    userid = user.id.toString()\n                }\n\n            }\n            Log.d(TAG, \"onCreate: ${userid}\")\n            mSocket!!.emit(\"selectStatus\", 1, roomAddr, infoOfUser)\n            //serverWaitingRoomAdapter.modelList[0].status = 1\n\n            startActivityForResult(intent, 100)\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n    }\n\n    override fun onItemClicked() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n//        mSocket!!.disconnect()\n        finish()\n    }\n\n    var showEnteredMember = Emitter.Listener {\n\n        Log.d(TAG, \"it[0]: ${it[0]}\")\n        invitedFriendsList.clear()\n        val jsonArray: JSONArray = JSONArray(it[0].toString())\n        val gson = Gson()\n        for (i in 0 until jsonArray.length()) {\n            val jsonstring = jsonArray.get(i).toString()\n            var member = gson.fromJson(jsonstring, GroupMember::class.java)\n            invitedFriendsList.add(member)\n        }\n        CoroutineScope(Dispatchers.Main).launch {\n            serverWaitingRoomAdapter.notifyDataSetChanged()\n        }\n    }\n\n\n    var DoSelectPhoto = Emitter.Listener {\n        CoroutineScope(Dispatchers.Main).launch {\n            server_choose_photo_cardview.visibility = View.VISIBLE\n        }\n\n    }\n\n\n    //note 5.1 사진 선택을 완료하면 선택완료 정보를 서버로 보냄,\n    @RequiresApi(Build.VERSION_CODES.Q)\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        when (requestCode) {\n            100 -> {\n                if (data != null) {\n                    val count = data.clipData!!.itemCount\n\n                    //내가 가져온 사진 개수 저장\n                    numOfMyPhoto = count\n\n                    for (i in 0 until count) {\n                        var imageUri = data.clipData!!.getItemAt(i).uri\n                        var taketime: String? = null\n                        var pictureowner: String? = null\n\n                        //압축\n                        //원본 파일 가져오기\n                        actualImage = FileUtil.from(this, imageUri)\n\n                        //메타정보추출하기\n                        exif = ExifInterface(actualImage!!)\n                        if (exif != null) {\n                            taketime = exif.getAttribute(ExifInterface.TAG_DATETIME).toString()\n//                            pictureowner = exif.getAttribute(ExifInterface.TAG_ARTIST).toString()\n                            var ANDROID_ID: String = Settings.Secure.getString(\n                                applicationContext.contentResolver,\n                                Settings.Secure.ANDROID_ID\n                            )\n                            pictureowner = ANDROID_ID\n                        }\n                        //압축하기\n                        runBlocking {\n                            compressedImage = compressImage(actualImage!!)\n                        }\n\n                        //modelList에 넣어두기\n                        var photoinfo = ServerThumbnailPhotoModel(\n                            imageUri,\n                            taketime!!,\n                            pictureowner!!,\n                            i,\n                            count\n                        )\n\n                        photoModelList.add(photoinfo)\n\n\n                        runBlocking {\n                            CoroutineScope(Dispatchers.IO).launch {\n//                        //압축한 파일 보내기\n                                var image_string =\n                                    ImageHandler.bitmapToString(loadBitmap(compressedImage!!))\n                                mSocket!!.emit(\n                                    \"SendPictureFromClient\",\n                                    image_string,\n                                    roomAddr,\n                                    taketime,\n                                    pictureowner,\n                                    i,\n                                    count\n                                )\n                            }.join()\n                        }\n                    }\n                    mSocket!!.emit(\"selectStatus\", 2, roomAddr, infoOfUser)\n                }\n            }\n        }\n    }\n\n    fun compressImage(originalImage: File): File? {\n        var ResultImage: File? = null\n        runBlocking {\n            coroutineScope {\n                launch {\n                    // Default compression\n                    ResultImage =\n                        Compressor.compress(this@ServerWaitingRoomActivity, originalImage!!)\n                        {\n//                    resolution(1500, 1500)\n                            quality(95)\n                            format(Bitmap.CompressFormat.JPEG)\n//                    size(1_097_152) // 2 MB\n                        }\n                }\n            }.join()\n        }\n        return ResultImage\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pic_pho/WaitingRoomServer/ServerWaitingRoomActivity.kt	(revision cb083d836199e50aa82769b1e44a642270a511a1)
+++ app/src/main/java/com/example/pic_pho/WaitingRoomServer/ServerWaitingRoomActivity.kt	(date 1617556508000)
@@ -1,32 +1,34 @@
 package com.example.pic_pho.WaitingRoomServer
 
+import android.app.Dialog
+import android.content.Context
 import android.content.Intent
 import android.graphics.Bitmap
+import android.graphics.Color
+import android.graphics.drawable.ColorDrawable
 import android.os.Build
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
-import android.provider.MediaStore
 import android.provider.Settings
 import android.util.Log
+import android.view.Gravity
 import android.view.View
+import android.widget.TextView
 import androidx.annotation.RequiresApi
-import androidx.annotation.UiThread
 import androidx.exifinterface.media.ExifInterface
 import androidx.recyclerview.widget.LinearLayoutManager
-import com.example.pic_pho.App
 import com.example.pic_pho.CellularSocket.SocketUtil
 import com.example.pic_pho.ImageHandler.ImageHandler
 import com.example.pic_pho.MakeGroup.MakeGroupActivity
 import com.example.pic_pho.PhotoRoomServer.FileUtil
+import com.example.pic_pho.PhotoRoomServer.ServerPhotoRoomActivity
 import com.example.pic_pho.PhotoRoomServer.ServerThumbnailPhotoModel
-import com.example.pic_pho.WifiDirect.WaitingForOwnerActivity
-import com.example.pic_pho.WifiDirect.WifiDirectMainActivity
+import com.example.pic_pho.R
 import com.example.pic_pho.databinding.ActivityWaitingRoomServerBinding
 import com.github.nkzawa.emitter.Emitter
 import com.github.nkzawa.socketio.client.Socket
 import com.google.gson.Gson
 import com.google.gson.JsonObject
-import com.google.gson.JsonParser
 import com.kakao.sdk.user.UserApiClient
 import id.zelory.compressor.Compressor
 import id.zelory.compressor.constraint.format
@@ -37,10 +39,7 @@
 import kotlinx.coroutines.*
 import org.json.JSONArray
 import kotlin.collections.ArrayList as ArrayList
-import org.json.JSONObject
 import java.io.File
-import kotlin.math.log
-import kotlin.reflect.typeOf
 
 class ServerWaitingRoomActivity : AppCompatActivity(), ServerWaitingRoomInterface {
 
@@ -66,6 +65,9 @@
     private var compressedImage: File? = null
     private val photoModelList = ArrayList<ServerThumbnailPhotoModel>()
     var roomAddr: String? = null
+    private var dialog: Dialog? = null
+
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         binding = ActivityWaitingRoomServerBinding.inflate(layoutInflater)
@@ -186,7 +188,25 @@
     override fun onBackPressed() {
         super.onBackPressed()
 //        mSocket!!.disconnect()
-        finish()
+
+        CoroutineScope(Dispatchers.Main).launch {
+            dialog =
+                ServerPhotoRoomActivity.showDialog(
+                    context = this,
+                    resource = R.layout.dialog_leave_waitingroom,
+                    gravity = Gravity.CENTER,
+                    color = Color.TRANSPARENT
+                )
+            dialog!!.findViewById<TextView>(R.id.button_leave).setOnClickListener {
+                finish()
+            }
+            dialog!!.findViewById<TextView>(R.id.button_continue).setOnClickListener {
+
+            }
+        }
+
+
+//        finish()
     }
 
     var showEnteredMember = Emitter.Listener {
@@ -306,5 +326,12 @@
         return ResultImage
     }
 
-
+    fun showDialog(context: Context, resource: Int, gravity: Int, color: Int): Dialog {
+        var dialog = Dialog(context)
+        dialog.setContentView(resource)
+        dialog.window!!.setGravity(gravity)
+        dialog.window!!.setBackgroundDrawable(ColorDrawable(color))
+        dialog.show()
+        return dialog
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/pic_pho/PhotoRoomServer/ServerPhotoRoomActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pic_pho.PhotoRoomServer\n\nimport android.app.Dialog\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.graphics.Color\nimport android.graphics.PorterDuff\nimport android.graphics.drawable.ColorDrawable\nimport android.media.AudioManager\nimport android.media.MediaScannerConnection\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.provider.MediaStore\nimport android.provider.Settings\nimport android.util.Base64\nimport android.util.DisplayMetrics\nimport android.util.Log\nimport android.view.Gravity\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.animation.Animation\nimport android.view.animation.AnimationUtils\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.annotation.RequiresApi\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.exifinterface.media.ExifInterface\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.viewpager2.widget.ViewPager2\nimport com.example.pic_pho.App\nimport com.example.pic_pho.CellularSocket.SocketUtil\nimport com.example.pic_pho.GroupVoiceCall.AGEventHandler\nimport com.example.pic_pho.GroupVoiceCall.EngineEventHandler\nimport com.example.pic_pho.GroupVoiceCall.WorkerThread\nimport com.example.pic_pho.ImageHandler.ImageHandler\nimport com.example.pic_pho.PhotoRoomServer.Drawer.ServerDrawerMemberModel\nimport com.example.pic_pho.PhotoRoomServer.Drawer.ServerDrawerMembersAdapter\nimport com.example.pic_pho.PhotoRoomServer.Drawer.ServerDrawerPickAdapter\nimport com.example.pic_pho.PhotoRoomServer.ViewPager.ServerPhotoRoomPagerAdapter\nimport com.example.pic_pho.R\nimport com.example.pic_pho.databinding.ActivityServerphotoroomBinding\nimport com.example.pic_pho.databinding.ItemPhotoroomPagerBinding\nimport com.github.nkzawa.emitter.Emitter\nimport com.github.nkzawa.socketio.client.Socket\nimport id.zelory.compressor.Compressor\nimport id.zelory.compressor.constraint.format\nimport id.zelory.compressor.constraint.quality\nimport id.zelory.compressor.loadBitmap\nimport kotlinx.android.synthetic.main.activity_photoroom.*\nimport kotlinx.android.synthetic.main.activity_serverphotoroom.*\nimport kotlinx.android.synthetic.main.dialog_accept_focus.*\nimport kotlinx.android.synthetic.main.item_photoroom_pager.*\nimport kotlinx.coroutines.*\nimport java.io.ByteArrayOutputStream\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.OutputStream\nimport kotlin.concurrent.thread\n\nclass ServerPhotoRoomActivity : AppCompatActivity(), ServerThumbnailRecyclerViewInterface,\n    AGEventHandler {\n\n    val TAG: String = \"로그\"\n    var returnedImage: Bitmap? = null\n    lateinit var mSocket: Socket\n    lateinit var exif: ExifInterface\n    private var actualImage: File? = null\n    private var compressedImage: File? = null\n    private var photoFlag = false\n    private var drawer: LinearLayout? = null\n    private var drawerCover: LinearLayout? = null\n    private var isPageOpen = false\n    private var engineEventHandler: EngineEventHandler? = null\n    private var currentPagerPosition = 0\n    private val photoModelList = ArrayList<ServerThumbnailPhotoModel>()\n    private val drawerMemberList = ArrayList<ServerDrawerMemberModel>()\n\n    //    private lateinit var focusDialogBinding: DialogAcceptFocusBinding\n    private var dialog: Dialog? = null\n    // claim button clicked\n    var isClickedClaim : Boolean = false\n\n    private var photoOldPosition: Int = 0\n    private var myName: String? = null\n    private var moveToPosition: Int = 0\n\n\n    @Volatile\n    private var mAudioRouting = -1\n\n    @Volatile\n    private var mAudioMuted = false\n\n    var numOfReceivedPhoto: Int = 0\n    var numOfExpectedPhoto: Int = 0\n    var numOfMyPhoto: Int = 0\n    var workerThread: WorkerThread? = null\n    var roomAddress: String? = null\n    var numOfMembers: Int = 0\n\n    companion object {\n        var photoPickedList = ArrayList<ServerThumbnailPhotoModel>()\n        lateinit var serverThumbnailRecyclerAdapter: ServerThumbnailRecyclerAdapter\n        lateinit var serverPhotoRoomPagerAdapter: ServerPhotoRoomPagerAdapter\n        lateinit var serverDrawerPickAdapter: ServerDrawerPickAdapter\n        lateinit var serverDrawerMembersAdapter: ServerDrawerMembersAdapter\n        lateinit var binding: ActivityServerphotoroomBinding\n        lateinit var photobinding: ItemPhotoroomPagerBinding\n\n        fun changeSelectedPhotoByClicked(position: Int) {\n            binding.ServerPhotoroomViewPager.currentItem = position\n        }\n\n        fun scanFile(context: Context?, f: File, mimeType: String) {\n            MediaScannerConnection\n                .scanFile(context, arrayOf(f.absolutePath), arrayOf(mimeType), null)\n        }\n\n        fun getExif(file: File) {\n            var exif = ExifInterface(file)\n            if (exif != null) {\n                var myAttribute: String? = \"[Exif information] \\n\\n\"\n                myAttribute += \"TAG_DATETIME           ::: \" + exif.getAttribute(ExifInterface.TAG_DATETIME)\n                    .toString() + \"\\n\"\n                myAttribute += \"TAG_ARTIST             ::: \" + exif.getAttribute(ExifInterface.TAG_ARTIST)\n                    .toString() + \"\\n\"\n            }\n        }\n\n        fun showDialog(context: Context, resource: Int, gravity: Int, color: Int): Dialog {\n            var dialog = Dialog(context)\n            dialog.setContentView(resource)\n            dialog.window!!.setGravity(gravity)\n            dialog.window!!.setBackgroundDrawable(ColorDrawable(color))\n            dialog.show()\n            return dialog\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        Log.d(TAG, \"onCreate: \")\n        binding = ActivityServerphotoroomBinding.inflate(layoutInflater)\n        photobinding = ItemPhotoroomPagerBinding.inflate(layoutInflater)\n\n        setContentView(binding.root)\n\n        if (dialog != null)\n            dialog!!.dismiss()\n\n        CoroutineScope(Dispatchers.Main).launch {\n            binding.imageViewClaimFocus.setColorFilter(\n                resources.getColor(R.color.picpho_salmon),\n                PorterDuff.Mode.SRC_IN\n            )\n//            binding.imageViewClaimFocus.imageTintList = ColorStateList.valueOf(Color.parseColor(R.color.picpho_salmon.toString()))\n        }\n\n//        val intent: Intent = getIntent()\n\n        // socket 통신 시작\\\n        mSocket = SocketUtil.createAndConnectSocket()!!\n//\n//\n\n//        //방이름을 먼저 찾아봅니다!\n//\n        mSocket.on(\"SendPictureFromServer\", imageReturn)\n        mSocket.on(\"done\", imageReceiveDone)\n        mSocket.on(\"privateRoomSuccess\", privateRoomSuccess)\n        mSocket.on(\"receiveFocus\", focusReceive)\n        mSocket.on(\"CancelFocus\", focusCancel)\n        photoFlag = false\n//\n//        //사진 내려받을 때 쓰는 변수들 초기화\n        numOfExpectedPhoto = 0\n        numOfMyPhoto = 0\n//\n//        // Group Call 시작\n//        val intent = intent\n////        val channel = intent.getStringExtra(\"roomAddress\")\n//\n        val channel = \"picpho\"\n        App.initWorkerThread()\n        workerThread = App.workerThread\n        engineEventHandler = workerThread!!.eventHandler()\n        engineEventHandler!!.addEventHandler(this)\n        workerThread!!.joinChannel(channel, workerThread!!.engineConfig.mUid)\n        volumeControlStream = AudioManager.STREAM_VOICE_CALL\n\n        // recyclerView & adapter 바인딩 (총 4개)\n        serverThumbnailRecyclerAdapter = ServerThumbnailRecyclerAdapter(this)\n        serverThumbnailRecyclerAdapter.submitList(this.photoModelList)\n        serverPhotoRoomPagerAdapter = ServerPhotoRoomPagerAdapter(this.photoModelList)\n        serverDrawerPickAdapter = ServerDrawerPickAdapter(photoPickedList)\n        serverDrawerMembersAdapter = ServerDrawerMembersAdapter(drawerMemberList)\n\n        // Drawer 부분\n        binding.recyclerviewDrawerPicked.apply {\n            layoutManager = LinearLayoutManager(\n                this@ServerPhotoRoomActivity,\n                LinearLayoutManager.HORIZONTAL,\n                false\n            )\n            adapter = serverDrawerPickAdapter\n        }\n        binding.recyclerviewDrawerMember.apply {\n            layoutManager = LinearLayoutManager(\n                this@ServerPhotoRoomActivity,\n                LinearLayoutManager.VERTICAL,\n                false\n            )\n            adapter = serverDrawerMembersAdapter\n        }\n        // 메인 부분\n        binding.ServerPhotoroomViewPager.apply {\n            adapter = serverPhotoRoomPagerAdapter\n            orientation = ViewPager2.ORIENTATION_HORIZONTAL\n        }\n\n        binding.ServerPhotoRoomRecyclerView.apply {\n            layoutManager = LinearLayoutManager(\n                this@ServerPhotoRoomActivity,\n                LinearLayoutManager.HORIZONTAL,\n                false\n            )\n            adapter = serverThumbnailRecyclerAdapter\n        }\n\n        // Animation 시작\n        drawer = binding.drawerPhotoRoom\n        drawerCover = binding.drawerCover\n        val leftAnimation = AnimationUtils.loadAnimation(this, R.anim.translate_left)\n        val rightAnimation = AnimationUtils.loadAnimation(this, R.anim.translate_right)\n\n        binding.imageViewPhotoRoomMoreAction.setOnClickListener {\n            CoroutineScope(Dispatchers.Main).launch {\n                clickDrawer(leftAnimation, rightAnimation)\n            }\n        }\n        binding.drawerEmpty.setOnClickListener {\n            clickDrawer(leftAnimation, rightAnimation)\n        }\n\n        // 스피커폰 버튼\n        binding.imageViewSound.setOnClickListener {\n            onSwitchSpeakerClicked()\n        }\n\n\n        // 주목하기 버튼\n        binding.imageViewClaimFocus.setOnClickListener {\n            Log.d(TAG, \"onCreate: 내가 주목하기 눌렀당!!\")\n            if (!isClickedClaim) {\n                clickClaimFocus()\n                isClickedClaim = !isClickedClaim\n            }\n            else{\n                dismissClaimFocus()\n                isClickedClaim = !isClickedClaim\n            }\n        }\n\n        binding.linearLayoutVoice.setOnClickListener {\n            onVoiceMuteClicked()\n        }\n\n        val TEST_ROOM_ADDRESS: String = \"roomAddress_for_test\"\n//        roomAddress = intent.getStringExtra(\"roomAddress\")\n        roomAddress = TEST_ROOM_ADDRESS\n        numOfMembers = intent.getIntExtra(\"numOfMembers\", 0)\n        Toast.makeText(this, \"${roomAddress}\", Toast.LENGTH_SHORT).show()\n        mSocket.emit(\"privateRoom\", roomAddress.toString(), numOfMembers)\n    }\n\n    private fun dismissClaimFocus() {\n        mSocket.emit(\"CancelFocus\", roomAddress)\n        CoroutineScope(Dispatchers.Main).launch {\n            binding.imageViewClaimFocus.setColorFilter(\n                resources.getColor(R.color.picpho_salmon),\n                PorterDuff.Mode.SRC_IN\n            )\n        }\n    }\n\n    var focusCancel = Emitter.Listener {\n        val lock: String = it[0].toString()\n        Log.d(TAG, \"lock is : $lock\")\n        CoroutineScope(Dispatchers.Main).launch {\n            binding.imageViewClaimFocus.setColorFilter(\n                resources.getColor(R.color.picpho_salmon),\n                PorterDuff.Mode.SRC_IN\n            )\n            binding.imageViewClaimFocus.isEnabled = true\n        }\n    }\n\n    var focusReceive = Emitter.Listener {\n        Log.d(TAG, \"focusreceive: focus received!!\")\n        val photoPosition: Int = Integer.parseInt(it[0].toString())\n        val hostName: String = it[1].toString()\n\n        // 주목 시킨 사람\n        if(hostName.equals(\"cho kuni\")){\n            CoroutineScope(Dispatchers.Main).launch {\n                binding.imageViewClaimFocus.setColorFilter(\n                    resources.getColor(R.color.picpho_blue),\n                    PorterDuff.Mode.SRC_IN\n                )\n            }\n        \n        // 주목 요청 받은 사람\n        }else{\n            receiveClaimFocus(this, photoPosition = photoPosition, hostName = hostName)\n            CoroutineScope(Dispatchers.Main).launch {\n                binding.imageViewClaimFocus.setColorFilter(\n                    resources.getColor(R.color.colorBackGroundGray),\n                    PorterDuff.Mode.SRC_IN\n                )\n                binding.imageViewClaimFocus.isEnabled = false\n            }\n        }\n    }\n\n    private fun receiveClaimFocus(context: Context, photoPosition: Int, hostName: String) {\n        Log.d(TAG, \"receiveClaimFocus: receive claim focus\")\n        CoroutineScope(Dispatchers.Main).launch {\n            dialog =\n                showDialog(\n                    context = context,\n                    resource = R.layout.dialog_accept_focus,\n                    gravity = Gravity.BOTTOM,\n                    color = Color.TRANSPARENT\n                )\n            dialog!!.findViewById<TextView>(R.id.wantSkip).setOnClickListener {\n                Log.d(TAG, \"onCreate: focusDialogBinding.wantSkip.setOnClickListener\")\n                dialog!!.dismiss()\n            }\n            dialog!!.findViewById<TextView>(R.id.moveToHost).setOnClickListener {\n                Log.d(\n                    TAG,\n                    \"onCreate focusDialogBinding.moveToHost.setOnClickListener : moveToPostition is $moveToPosition\"\n                )\n                binding.ServerPhotoroomViewPager.setCurrentItem(moveToPosition, true)\n                dialog!!.dismiss()\n            }\n        }\n        moveToPosition = photoPosition\n    }\n\n\n    private fun clickClaimFocus() {\n        myName = \"cho kuni\" //todo : 바꿔야 함\n        Log.d(TAG, \"clickClaimFocus: emit claim focus\")\n        mSocket.emit(\"claimFocus\", roomAddress, photoOldPosition, myName!!)\n    }\n\n\n    fun clickDrawer(leftAnimation: Animation, rightAnimation: Animation) {\n        if (isPageOpen) {\n            Log.d(\"TAG\", \"true\")\n            drawerCover!!.visibility = View.GONE\n            drawer!!.startAnimation(rightAnimation)\n            drawer!!.visibility = View.GONE\n            isPageOpen = false\n        } else {\n            Log.d(\"TAG\", \"false\")\n            drawerCover!!.visibility = View.VISIBLE\n\n            // 하위 View Touch Event 막기\n            drawerCover!!.setOnTouchListener { v, event ->\n                true\n            }\n            drawer!!.visibility = View.VISIBLE\n            drawer!!.startAnimation(leftAnimation)\n            isPageOpen = true\n        }\n    }\n\n    fun recyclerviewSortByID() {\n        var sortedModelList = photoModelList.sortedBy { it.taketime }\n        sortedModelList = sortedModelList.sortedBy { it.pictureowner }\n        photoModelList.clear()\n        photoModelList.addAll(sortedModelList)\n\n        runOnUiThread {\n            serverThumbnailRecyclerAdapter.notifyDataSetChanged()\n            serverPhotoRoomPagerAdapter.notifyDataSetChanged()\n        }\n    }\n\n    override fun onStart() {\n        super.onStart()\n        Log.d(TAG, \"onStart: \")\n\n        if (!photoFlag) {\n            var intent = Intent(Intent.ACTION_PICK)\n            intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true)\n            intent.data = MediaStore.Images.Media.EXTERNAL_CONTENT_URI\n            intent.type = \"image/*\"\n            startActivityForResult(intent, 100)\n            photoFlag = true\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        serverThumbnailRecyclerAdapter.notifyDataSetChanged()\n        serverPhotoRoomPagerAdapter.notifyDataSetChanged()\n        binding.ServerPhotoroomViewPager.setCurrentItem(currentPagerPosition, true)\n        binding.ServerPhotoRoomRecyclerView.smoothScrollToPosition(currentPagerPosition)\n\n        val displayMetrics = DisplayMetrics()\n        windowManager.defaultDisplay.getMetrics(displayMetrics)\n\n        var width = displayMetrics.widthPixels / 3\n\n        binding.ServerPhotoroomViewPager.registerOnPageChangeCallback(object :\n            ViewPager2.OnPageChangeCallback() {\n            override fun onPageSelected(position: Int) {\n                super.onPageSelected(position)\n\n                currentPagerPosition = position\n\n                var photoNewPosition: Int = 0\n                val photoLastIndex: Int = serverThumbnailRecyclerAdapter.itemCount - 1\n                // 원래 보고 있던 포지션과 바뀐 포지션을 비교해서 중앙으로 보내주는 부분\n                if (photoOldPosition > position) {\n                    photoNewPosition = position - 1\n                } else if (photoOldPosition < position) {\n                    photoNewPosition = position + 1\n                }\n\n                // 바뀐 포지션이 index 마지막이었다면\n                if (position == photoLastIndex) {\n                    photoNewPosition = photoLastIndex\n                    val param =\n                        binding.ServerPhotoRoomRecyclerView.layoutParams as ViewGroup.MarginLayoutParams\n                    param.setMargins(0, 0, width, 0)\n                    binding.ServerPhotoRoomRecyclerView.layoutParams = param\n                }\n                // 바뀐 포지션이 index 처음이라면\n                else if (position == 0) {\n                    photoNewPosition = 0\n                    val param =\n                        binding.ServerPhotoRoomRecyclerView.layoutParams as ViewGroup.MarginLayoutParams\n                    param.setMargins(width, 0, 0, 0)\n                    binding.ServerPhotoRoomRecyclerView.layoutParams = param\n                } else {\n                    val param =\n                        binding.ServerPhotoRoomRecyclerView.layoutParams as ViewGroup.MarginLayoutParams\n                    param.setMargins(0, 0, 0, 0)\n                    binding.ServerPhotoRoomRecyclerView.layoutParams = param\n                }\n                binding.ServerPhotoRoomRecyclerView.smoothScrollToPosition(photoNewPosition)\n                photoOldPosition = position\n            }\n        })\n    }\n\n    override fun onStop() {\n        super.onStop()\n        Log.d(TAG, \"onStop: \")\n        Log.d(TAG, \"onStop: onStop on PhotoRoomActivity\")\n\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        Log.d(\"onDestroy\", \"onDestroy\")\n        if (workerThread != null) {\n            workerThread!!.leaveChannel(workerThread!!.engineConfig.mChannel)\n        }\n        if (engineEventHandler != null) {\n            engineEventHandler!!.removeEventHandler(this)\n            quitPhotoRoom()\n        }\n        if (dialog != null)\n            dialog!!.dismiss()\n\n        if (mSocket!=null){\n            mSocket.disconnect()\n        }\n    }\n\n    // GroupCall 관련 함수\n    fun onSwitchSpeakerClicked() {\n        workerThread!!.rtcEngine!!.setEnableSpeakerphone(mAudioRouting != 3)\n    }\n\n\n    private fun quitPhotoRoom() {\n        finish()\n    }\n\n    fun onVoiceMuteClicked() {\n        Log.d(TAG, \"onVoiceMuteClicked: audio_status: $mAudioMuted\")\n        workerThread!!.rtcEngine!!.muteLocalAudioStream(!mAudioMuted.also { mAudioMuted = it })\n        if(mAudioMuted){\n            binding.imageViewVoice.setImageResource(R.drawable.ic_baseline_keyboard_voice_24)\n            binding.linearLayoutVoice.setBackgroundResource(R.drawable.border_round_blue)\n        }else{\n            binding.imageViewVoice.setImageResource(R.drawable.ic_baseline_mic_off_24)\n            binding.linearLayoutVoice.setBackgroundResource(0)\n        }\n        mAudioMuted = !mAudioMuted\n    }\n\n    override fun onJoinChannelSuccess(channel: String, uid: Int, elapsed: Int) {\n        Log.d(TAG, \"onJoinChannelSuccess: ${channel}\")\n        runOnUiThread(Runnable {\n            if (isFinishing) {\n                return@Runnable\n            }\n            Log.d(TAG, \"onJoinChannelSuccess: ${mAudioMuted}\")\n            workerThread!!.rtcEngine!!.muteLocalAudioStream(mAudioMuted)\n        })\n    }\n\n    override fun onUserOffline(uid: Int, reason: Int) {\n        Log.d(TAG, \"onUserOffline: \" + (uid and 0xFFFFFFFFL.toInt()) + \" \" + reason)\n    }\n\n    override fun onExtraCallback(type: Int, vararg data: Any?) {\n        runOnUiThread(Runnable {\n            if (isFinishing) {\n                return@Runnable\n            }\n            doHandleExtraCallback(type, *data as Array<out Any>)\n        })\n    }\n\n    private fun doHandleExtraCallback(type: Int, vararg data: Any) {\n        when (type) {\n            AGEventHandler.EVENT_TYPE_ON_AUDIO_ROUTE_CHANGED -> {\n                notifyHeadsetPlugged(data[0] as Int)\n            }\n        }\n    }\n\n    fun notifyHeadsetPlugged(routing: Int) {\n        mAudioRouting = routing\n        val imageView = binding.imageViewSound\n        if (mAudioRouting == 3) { // Speakerphone\n            imageView.setColorFilter(\n                resources.getColor(R.color.picpho_blue),\n                PorterDuff.Mode.SRC_IN\n            )\n        } else {\n            imageView.clearColorFilter()\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.Q)\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        when (requestCode) {\n            100 -> {\n                if (data != null) {\n                    val count = data.clipData!!.itemCount\n\n                    //내가 가져온 사진 개수 저장\n                    numOfMyPhoto = count\n\n                    for (i in 0 until count) {\n                        var imageUri = data.clipData!!.getItemAt(i).uri\n                        var taketime: String? = null\n                        var pictureowner: String? = null\n\n                        //압축\n                        //원본 파일 가져오기\n                        actualImage = FileUtil.from(this, imageUri)\n\n                        //메타정보추출하기\n                        exif = ExifInterface(actualImage!!)\n                        if (exif != null) {\n                            taketime = exif.getAttribute(ExifInterface.TAG_DATETIME).toString()\n//                            pictureowner = exif.getAttribute(ExifInterface.TAG_ARTIST).toString()\n                            var ANDROID_ID: String = Settings.Secure.getString(\n                                applicationContext.contentResolver,\n                                Settings.Secure.ANDROID_ID\n                            )\n                            pictureowner = ANDROID_ID\n                        }\n                        //압축하기\n                        runBlocking {\n                            compressedImage = compressImage(actualImage!!)\n                        }\n\n                        //modelList에 넣어두기\n                        var photoinfo = ServerThumbnailPhotoModel(\n                            imageUri,\n                            taketime!!,\n                            pictureowner!!,\n                            i,\n                            count\n                        )\n\n                        photoModelList.add(photoinfo)\n\n\n//                        //압축한 파일 보내기\n                        var image_string = ImageHandler.bitmapToString(loadBitmap(compressedImage!!))\n                        mSocket.emit(\n                            \"SendPictureFromClient\",\n                            image_string,\n                            roomAddress,\n                            taketime,\n                            pictureowner,\n                            i,\n                            count\n                        )\n                    }\n                }\n            }\n        }\n    }\n\n    var privateRoomSuccess = Emitter.Listener {\n//        Toast.makeText(this, \"${it[0].toString()}\", Toast.LENGTH_SHORT).show()\n        Log.d(\"서버\", \"it[0].toString(): ${it[0]}\")\n    }\n\n    //서버에서 사진 받았을 때 실행되는 함수\n    var imageReturn = Emitter.Listener {\n        var data = it[0].toString()\n        var receivedtaketime = it[1].toString()\n        var receivedowner = it[2].toString()\n        var currentorder = it[3].toString()\n        var tocalcount = it[4].toString()\n        var sum_totalCount = it[5].toString()\n        var is_everyone = it[6].toString().toInt()\n\n        returnedImage = ImageHandler.convertString64ToImage(data)\n\n        thread {\n            var filepath: String = \"/sdcard\" + \"/DCIM/Picpho_test/\"\n            var filename: String =\n                \"Picpho_\" + System.currentTimeMillis().toString() + \".jpg\"\n//                \"Picpho_\" + receivedowner + \"_\" + System.currentTimeMillis().toString() + \".jpg\"\n            var file = File(filepath + filename)\n            // 디렉토리 존재하지 않으면 디렉토리 생성\n            val dirs = File(file.parent.toString())\n            if (!dirs.exists()) dirs.mkdirs()\n            ImageHandler.saveBitmapAsFile(returnedImage!!, file, receivedtaketime, receivedowner)\n            scanFile(this, file, \"jpg\")\n\n\n            //modelList에 넣어두기\n//            var photoinfo = ServerThumbnailPhotoModel(Uri.fromFile(file!!))\n            var photoinfo = ServerThumbnailPhotoModel(\n                Uri.fromFile(file),\n                receivedtaketime,\n                receivedowner,\n                currentorder.toInt(),\n                tocalcount.toInt()\n            )\n            photoModelList.add(photoinfo)\n            numOfReceivedPhoto++\n\n            Log.e(\"받은 사진\", \"${numOfReceivedPhoto} vs ${sum_totalCount.toInt() - numOfMyPhoto}\")\n            // 사진 싹 다 받았으면 한번 정렬해주기!\n            if (numOfReceivedPhoto == sum_totalCount.toInt() - numOfMyPhoto) // && is_everyone == 1)\n            {\n                recyclerviewSortByID()\n            }\n        }\n    }\n\n    var imageReceiveDone = Emitter.Listener {\n        numOfExpectedPhoto = it[0].toString().toInt() - numOfMyPhoto\n\n        runOnUiThread {\n            Toast.makeText(\n                App.instance,\n                \"개 이미지 보내기 완료!!!\",\n                Toast.LENGTH_SHORT\n            ).show()\n        }\n\n    }\n\n    fun compressImage(originalImage: File): File? {\n        var resultImage: File? = null\n        runBlocking {\n            coroutineScope {\n                launch {\n                    // Default compression\n                    resultImage = Compressor.compress(this@ServerPhotoRoomActivity, originalImage)\n                    {\n//                    resolution(1500, 1500)\n                        quality(95)\n                        format(Bitmap.CompressFormat.JPEG)\n//                    size(1_097_152) // 2 MB\n                    }\n                }\n            }.join()\n        }\n        return resultImage\n    }\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pic_pho/PhotoRoomServer/ServerPhotoRoomActivity.kt	(revision cb083d836199e50aa82769b1e44a642270a511a1)
+++ app/src/main/java/com/example/pic_pho/PhotoRoomServer/ServerPhotoRoomActivity.kt	(date 1617555808000)
@@ -4,7 +4,6 @@
 import android.content.Context
 import android.content.Intent
 import android.graphics.Bitmap
-import android.graphics.BitmapFactory
 import android.graphics.Color
 import android.graphics.PorterDuff
 import android.graphics.drawable.ColorDrawable
@@ -15,7 +14,6 @@
 import android.os.Bundle
 import android.provider.MediaStore
 import android.provider.Settings
-import android.util.Base64
 import android.util.DisplayMetrics
 import android.util.Log
 import android.view.Gravity
@@ -55,10 +53,7 @@
 import kotlinx.android.synthetic.main.dialog_accept_focus.*
 import kotlinx.android.synthetic.main.item_photoroom_pager.*
 import kotlinx.coroutines.*
-import java.io.ByteArrayOutputStream
 import java.io.File
-import java.io.FileOutputStream
-import java.io.OutputStream
 import kotlin.concurrent.thread
 
 class ServerPhotoRoomActivity : AppCompatActivity(), ServerThumbnailRecyclerViewInterface,
@@ -131,7 +126,7 @@
             }
         }
 
-        fun showDialog(context: Context, resource: Int, gravity: Int, color: Int): Dialog {
+        fun showDialog(context: CoroutineScope, resource: Int, gravity: Int, color: Int): Dialog {
             var dialog = Dialog(context)
             dialog.setContentView(resource)
             dialog.window!!.setGravity(gravity)
Index: app/src/main/res/layout/dialog_leave_waitingroom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/dialog_leave_waitingroom.xml	(date 1617555767000)
+++ app/src/main/res/layout/dialog_leave_waitingroom.xml	(date 1617555767000)
@@ -0,0 +1,92 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="340dp"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_height="210dp"
+    android:orientation="vertical"
+    android:background="@drawable/border_round_white"
+    android:weightSum="5">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical"
+        android:layout_weight="1.5"
+        android:weightSum="2">
+
+        <ImageView
+            android:id="@+id/imageView9"
+            android:layout_width="25dp"
+            android:layout_height="25dp"
+            android:layout_gravity="center_horizontal"
+            android:layout_weight="1.3"
+            android:rotationX="180"
+            app:srcCompat="@drawable/ic_baseline_info_24" />
+
+        <TextView
+            android:id="@+id/textView3"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:fontFamily="@font/noto_sans"
+            android:gravity="center"
+            android:text="방을 나가시겠습니까?"
+            android:textColor="#000000"
+            android:textSize="16sp" />
+
+        <TextView
+            android:id="@+id/textView2"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:text="다시 입장하실 수 없습니다."
+            android:fontFamily="@font/noto_sans"
+            android:textColor="#000000"
+            android:textSize="16sp"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="horizontal"
+        android:layout_weight="3.5"
+        android:weightSum="2">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:background="#29000000"
+            android:orientation="vertical">
+
+            <TextView
+                android:id="@+id/button_leave"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:fontFamily="@font/noto_sans"
+                android:gravity="center"
+                android:text="나가기"
+                android:textColor="#ffffff"
+                android:textSize="22sp"
+                android:textStyle="bold" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:background="#76cbff"
+            android:orientation="vertical">
+
+            <TextView
+                android:id="@+id/button_continue"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:fontFamily="@font/noto_sans"
+                android:gravity="center"
+                android:text="계속하기"
+                android:textColor="#ffffff"
+                android:textSize="22sp"
+                android:textStyle="bold" />
+        </LinearLayout>
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
