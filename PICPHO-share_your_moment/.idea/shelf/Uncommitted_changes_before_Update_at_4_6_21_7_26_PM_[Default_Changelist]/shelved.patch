Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    package=\"com.example.pic_pho\">\n    <!-- for wifi direct -->\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n    <uses-permission android:name=\"android.permission.BLUETOOTH\" />\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.ACCESS_MEDIA_LOCATION\" />\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n    <uses-permission android:name=\"android.permission.CAMERA\" />\n    <uses-permission android:name=\"com.google.android.apps.photos.permission.GOOGLE_PHOTOS\" />\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n\n    <uses-feature android:name=\"android.hardware.camera\" />\n\n    <application\n        android:name=\".App\"\n        android:allowBackup=\"true\"\n        android:icon=\"@drawable/picphomainlogo\"\n        android:label=\"@string/app_name\"\n        android:requestLegacyExternalStorage=\"true\"\n        android:roundIcon=\"@drawable/picphomainlogo\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\n        android:usesCleartextTraffic=\"true\">\n        <activity android:name=\".PhotoAlbum.PhotoAlbumViewPagerActivity\"></activity>\n        <activity android:name=\".WaitingRoomServer.ServerWaitingRoomActivity\" />\n        <activity\n            android:name=\".SplashActivity\"\n            android:screenOrientation=\"portrait\">\n\n            <!-- <intent-filter> -->\n            <!-- <action android:name=\"android.intent.action.MAIN\" /> -->\n            <!-- <category android:name=\"android.intent.category.LAUNCHER\" /> -->\n            <!-- </intent-filter> -->\n        </activity>\n        <activity\n            android:name=\".SelectP2pOrServerActivity\"\n            android:screenOrientation=\"portrait\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <activity\n            android:name=\".MakeGroup.MakeGroupActivity\"\n            android:screenOrientation=\"portrait\" />\n        <activity\n            android:name=\".PhotoRoomServer.ServerPhotoRoomActivity\"\n            android:configChanges=\"screenSize|orientation\"\n            android:screenOrientation=\"portrait\" />\n        <activity\n            android:name=\".Lobby.LobbyActivity\"\n            android:screenOrientation=\"portrait\" />\n        <activity\n            android:name=\".PhotoRoom.PhotoRoomActivity\"\n            android:screenOrientation=\"portrait\" />\n        <activity\n            android:name=\".LoginActivity\"\n            android:configChanges=\"screenSize|orientation\"\n            android:screenOrientation=\"portrait\" />\n        <activity android:name=\"com.kakao.sdk.auth.AuthCodeHandlerActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.VIEW\" />\n\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"android.intent.category.BROWSABLE\" />\n                <!-- Redirect URI: \"kakao{NATIVE_APP_KEY}://oauth“ -->\n                <data\n                    android:host=\"oauth\"\n                    android:scheme=\"kakaoece39b60a7c22e79f10be8045187312b\" />\n            </intent-filter>\n        </activity>\n        <activity\n            android:name=\".WifiDirect.WifiDirectMainActivity\"\n            android:screenOrientation=\"portrait\">\n\n            <!-- <intent-filter> -->\n            <!-- <action android:name=\"android.intent.action.MAIN\" /> -->\n            <!-- <category android:name=\"android.intent.category.LAUNCHER\" /> -->\n            <!-- </intent-filter> -->\n        </activity>\n        <activity\n            android:name=\".WifiDirect.WaitingForOwnerActivity\"\n            android:screenOrientation=\"portrait\" />\n        <activity\n            android:name=\".PhotoRoomServer.ServerPhotoEnlargeActivity\"\n            android:screenOrientation=\"portrait\" />\n\n        <provider\n            android:name=\"androidx.core.content.FileProvider\"\n            android:authorities=\"com.example.pic_pho.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/file_paths\" />\n\n            <grant-uri-permission\n                android:path=\"string\"\n                android:pathPattern=\"string\"\n                android:pathPrefix=\"string\" />\n        </provider>\n\n        <service\n            android:name=\".WifiDirect.SendStreamIntentService\"\n            android:exported=\"false\" />\n        <service\n            android:name=\".UnCatchTaskService\"\n            android:stopWithTask=\"false\" />\n        <service android:name=\".MyFirebaseMessagingService\">\n            <intent-filter>\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\n            </intent-filter>\n        </service>\n\n        <meta-data\n            android:name=\"preloaded_fonts\"\n            android:resource=\"@array/preloaded_fonts\" />\n    </application>\n\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 825bd17a31b302781ec1a87305e6c66a9e3876cc)
+++ app/src/main/AndroidManifest.xml	(date 1617704611000)
@@ -37,19 +37,19 @@
             android:name=".SplashActivity"
             android:screenOrientation="portrait">
 
-            <!-- <intent-filter> -->
-            <!-- <action android:name="android.intent.action.MAIN" /> -->
-            <!-- <category android:name="android.intent.category.LAUNCHER" /> -->
-            <!-- </intent-filter> -->
-        </activity>
-        <activity
-            android:name=".SelectP2pOrServerActivity"
-            android:screenOrientation="portrait">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
+             <intent-filter>
+             <action android:name="android.intent.action.MAIN" />
+             <category android:name="android.intent.category.LAUNCHER" />
+             </intent-filter>
+        </activity>
+        <activity
+            android:name=".SelectP2pOrServerActivity"
+            android:screenOrientation="portrait">
+<!--            <intent-filter>-->
+<!--                <action android:name="android.intent.action.MAIN" />-->
+
+<!--                <category android:name="android.intent.category.LAUNCHER" />-->
+<!--            </intent-filter>-->
         </activity>
         <activity
             android:name=".MakeGroup.MakeGroupActivity"
Index: app/src/main/java/com/example/pic_pho/CellularSocket/SocketUtil.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pic_pho.CellularSocket\n\nimport android.util.Log\nimport com.github.nkzawa.socketio.client.IO.socket\nimport com.github.nkzawa.socketio.client.Socket\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.runBlocking\nimport java.net.URISyntaxException\n\nclass SocketUtil {\n    companion object {\n        private val TAG = \"SocketUtil\"\n        var mSocket: Socket? = null\n        fun createAndConnectSocket(): Socket? {\n            return try {\n                mSocket = socket(\"http://52.78.242.130:5000/\") //영동\n                //                mSocket = socket(\"http://3.35.138.31:5000/\") //새힘\n//                mSocket = socket(\"http://13.125.236.83:5000/\") //정훈\n                Log.d(TAG, \"createAndConnectSocket: inSocketUtil\")\n                runBlocking {\n                    CoroutineScope(Dispatchers.IO).launch {\n                        Log.d(TAG, \"createAndConnectSocket: Coroutine launch\")\n                        mSocket!!.connect()\n                    }.join()\n                }\n                Log.d(TAG, \"createAndConnectSocket: success\")\n                mSocket\n            } catch (e: URISyntaxException) {\n                Log.d(TAG, \"failed\")\n                null\n            }\n        }\n\n        fun getSocket() : Socket{\n            return mSocket!!\n        }\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pic_pho/CellularSocket/SocketUtil.kt	(revision 825bd17a31b302781ec1a87305e6c66a9e3876cc)
+++ app/src/main/java/com/example/pic_pho/CellularSocket/SocketUtil.kt	(date 1617703514000)
@@ -15,8 +15,8 @@
         var mSocket: Socket? = null
         fun createAndConnectSocket(): Socket? {
             return try {
-                mSocket = socket("http://52.78.242.130:5000/") //영동
-                //                mSocket = socket("http://3.35.138.31:5000/") //새힘
+//                mSocket = socket("http://52.78.242.130:5000/") //영동
+                mSocket = socket("http://3.35.138.31:5000/") //새힘
 //                mSocket = socket("http://13.125.236.83:5000/") //정훈
                 Log.d(TAG, "createAndConnectSocket: inSocketUtil")
                 runBlocking {
@@ -33,7 +33,7 @@
             }
         }
 
-        fun getSocket() : Socket{
+        fun getSocket(): Socket {
             return mSocket!!
         }
 
Index: app/src/main/java/com/example/pic_pho/WaitingRoomServer/ServerWaitingRoomActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pic_pho.WaitingRoomServer\n\nimport android.app.Dialog\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.graphics.Color\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.provider.Settings\nimport android.util.Log\nimport android.view.Gravity\nimport android.view.View\nimport android.widget.TextView\nimport androidx.annotation.RequiresApi\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.exifinterface.media.ExifInterface\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.pic_pho.App\nimport com.example.pic_pho.CellularSocket.SocketUtil\nimport com.example.pic_pho.ImageHandler.ImageHandler\nimport com.example.pic_pho.MakeGroup.MakeGroupActivity\nimport com.example.pic_pho.PhotoRoomServer.FileUtil\nimport com.example.pic_pho.PhotoRoomServer.ServerPhotoRoomActivity\nimport com.example.pic_pho.PhotoRoomServer.ServerThumbnailPhotoModel\nimport com.example.pic_pho.R\nimport com.example.pic_pho.databinding.ActivityWaitingRoomServerBinding\nimport com.github.nkzawa.emitter.Emitter\nimport com.github.nkzawa.socketio.client.Socket\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport com.kakao.sdk.user.UserApiClient\nimport com.snatik.storage.Storage\nimport id.zelory.compressor.Compressor\nimport id.zelory.compressor.constraint.format\nimport id.zelory.compressor.constraint.quality\nimport id.zelory.compressor.loadBitmap\nimport kotlinx.android.synthetic.main.activity_waiting_room_server.*\nimport kotlinx.android.synthetic.main.item_waiting_room_server.*\nimport kotlinx.coroutines.*\nimport org.json.JSONArray\nimport java.io.File\n\nclass ServerWaitingRoomActivity : AppCompatActivity(), ServerWaitingRoomInterface {\n\n    data class GroupMember(\n        val UserID: String,\n        val NickName: String,\n        val ProfileUrl: String,\n        val IsHost: Boolean,\n        var status: Int\n    )\n\n\n    private lateinit var binding: ActivityWaitingRoomServerBinding\n    private val TAG = \"서버대기방\"\n\n    private lateinit var serverWaitingRoomAdapter: ServerWaitingRoomAdapter\n    var invitedFriendsList = ArrayList<GroupMember>()\n    var mSocket: Socket? = null\n    var infoOfUser: JsonObject? = null\n    var numOfMyPhoto: Int = 0\n    private var actualImage: File? = null\n    lateinit var exif: ExifInterface\n    private var compressedImage: File? = null\n    var roomAddr: String? = null\n    var roomName: String? = null\n    private var dialog: Dialog? = null\n\n    var returnedImage: Bitmap? = null\n    var numOfReceivedPhoto: Int = 0\n\n    companion object {\n        val photoModelList = ArrayList<ServerThumbnailPhotoModel>()\n\n        // 서버에서 삭제를 위한 storage 정의\n        var serverStorage: Storage? = null\n        var serverFilePathList = ArrayList<String>()\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityWaitingRoomServerBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        Log.d(TAG, \"onCreate: 서버 웨이팅 룸\")\n        dialog?.dismiss()\n        if (mSocket == null)\n            mSocket = SocketUtil.createAndConnectSocket()\n        runBlocking {\n            CoroutineScope(Dispatchers.IO).launch {\n                //note 4. 모든 사람들이 들어온 경우 사진을 선택할수있게 한다.\n                mSocket!!.on(\"DoSelectPhoto\", DoSelectPhoto)\n                //note 7. 서버는 클라이언트가 보내는 사진을 전송\n                mSocket!!.on(\"SendPictureFromServer\", imageReturn)\n                mSocket!!.on(\"enterMember\", showEnteredMember)\n                delay(100)\n            }.join()\n        }\n\n        serverWaitingRoomAdapter = ServerWaitingRoomAdapter(this)\n        serverWaitingRoomAdapter.submitList(invitedFriendsList)\n        binding.waitingMemberRecyclerview.apply {\n            layoutManager = LinearLayoutManager(\n                this@ServerWaitingRoomActivity,\n                LinearLayoutManager.VERTICAL,\n                false\n            )\n            adapter = serverWaitingRoomAdapter\n        }\n\n        // 삭제를 위한 storage init\n        serverStorage = Storage(applicationContext)\n\n        //note 대기방으로 넘어오는 경우\n        //note 1. 주소획득\n        Log.d(TAG, \"gogogogogogogo: \")\n        roomAddr = getIntent().getStringExtra(\"roomAddress\")\n        roomName = getIntent().getStringExtra(\"roomName\")\n        var ishost = getIntent().getBooleanExtra(\"isHost\", false)\n        var jsonobjectlist = getIntent().getSerializableExtra(\"jsonobjectlist\")\n\n        // note 1-1. 만약 호스트라면 강제시작, 다시 초대 버튼 활성화 시켜주기\n        if(ishost){\n            binding.buttonReinvite.visibility = View.VISIBLE\n            binding.buttonForceStart.visibility = View.VISIBLE\n        }\n\n\n        Log.d(TAG, \"jsonobjectlist: ${jsonobjectlist}, roomAddress is $roomAddr\")\n        //note 2. 서버에 접속\n        //mSocket = SocketUtil.createAndConnectSocket()\n//        mSocket = SocketUtil.getSocket()\n//        mSocket!!.on(\"enterMember\", showEnteredMember)\n//        //note 4. 모든 사람들이 들어온 경우 사진을 선택할수있게 한다.\n//        mSocket!!.on(\"DoSelectPhoto\", DoSelectPhoto)\n//        //note 7. 서버는 클라이언트가 보내는 사진을 전송\n//        mSocket!!.on(\"SendPictureFromServer\", imageReturn)\n//\n//        mSocket!!.connect()\n\n//\n//        runBlocking {\n//            CoroutineScope(Dispatchers.IO).launch {\n//                //note 리스너는 앞쪽에 배치\n//                //note 3.2 들어오는 사람들을 리사이클러뷰에 표시한다.\n\n//            }.join()\n//        }\n\n\n        Log.d(TAG, \"onCreate: ${roomAddr}\")\n        Log.d(TAG, \"ishost: ${ishost}\")\n        if (roomAddr != null) {\n            //note 3. 서버에 접속 성공하면, 클라이언트는 서버로 자신의 정보를 보내고, 서버는 접속 정보를 모든 방에 접속한 사람들에게 보냄\n            if (mSocket != null) {\n                //note 3.1 보내야 하는 정보는 userId = model.userId, name = model.name, profileImage = model.profileImage\n                UserApiClient.instance.me { user, error ->\n                    if (error != null) {\n                        Log.e(TAG, \"사용자 정보 요청 실패\", error)\n                        infoOfUser = null\n                    } else if (user != null) {\n                        Log.d(TAG, \"enterToWaitingroomWithInvitation\")\n                        infoOfUser = JsonObject()\n                        infoOfUser!!.addProperty(\"UserID\", user.id.toString())\n                        infoOfUser!!.addProperty(\n                            \"NickName\",\n                            user.kakaoAccount?.profile?.nickname.toString()\n                        )\n                        infoOfUser!!.addProperty(\n                            \"ProfileImg\",\n                            user.kakaoAccount?.profile?.profileImageUrl.toString()\n                        )\n                        Log.d(TAG, \"getUserInfo11: ${infoOfUser}\")\n                        if (ishost) {\n                            infoOfUser!!.addProperty(\"IsHost\", \"True\")\n                            Log.d(\n                                TAG,\n                                \"onCreate: before emit host room Addr $roomAddr, infoOfUser $infoOfUser, size is ${MakeGroupActivity.jsonobjectlist.size()}\"\n                            )\n                            mSocket!!.emit(\n                                \"enterRoom\",\n                                roomAddr,\n                                infoOfUser,\n                                MakeGroupActivity.jsonobjectlist.size()\n                            )\n                        } else {\n                            infoOfUser!!.addProperty(\"IsHost\", \"False\")\n                            Log.d(\n                                TAG,\n                                \"onCreate: before emit client room Addr $roomAddr, infoOfUser is $infoOfUser\"\n                            )\n                            mSocket!!.emit(\"enterRoom\", roomAddr, infoOfUser, 0)\n                        }\n                    }\n                }\n\n\n            }\n        }\n\n\n        //note 8. 클라이언트는 서버로 부터 받는 진행상황을 모두 실시간으로 업데이트\n\n        //note 9. 모든 사진이 받아지면 포토룸으로 이동\n\n\n        //note 리사이클러 뷰에 대한 내용\n        //note 사진 선택 클릭되면 선택 시 정보를 서버로 보냄.\n        binding.serverChoosePhotoCardview.setOnClickListener {\n            var intent = ImageHandler.selectPhoto()\n\n            wifi_progress_cloud_imageview.visibility = View.INVISIBLE\n            wifi_progress_cloud_ing_imageview.visibility = View.VISIBLE\n            var userid: String? = null\n\n            UserApiClient.instance.me { user, error ->\n                if (error != null) {\n                    userid = null\n                } else if (user != null) {\n                    userid = user.id.toString()\n                }\n\n            }\n            Log.d(TAG, \"onCreate: ${userid}\")\n            mSocket!!.emit(\"selectStatus\", 1, roomAddr, infoOfUser)\n            //serverWaitingRoomAdapter.modelList[0].status = 1\n\n            startActivityForResult(intent, 100)\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        Log.d(TAG, \"onResume: 서버 웨이팅 룸\")\n\n\n    }\n\n    override fun onItemClicked() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        Log.d(TAG, \"onDestroy: 서버 웨이팅 룸\")\n\n        dialog?.dismiss()\n    }\n\n    override fun onBackPressed() {\n//        super.onBackPressed()\n//        mSocket!!.disconnect()\n\n        runBlocking {\n            CoroutineScope(Dispatchers.Main).launch {\n                dialog =\n                    ServerPhotoRoomActivity.showDialog(\n                        context = this@ServerWaitingRoomActivity,\n                        resource = R.layout.dialog_leave_waitingroom,\n                        gravity = Gravity.CENTER,\n                        color = Color.TRANSPARENT\n                    )\n                dialog!!.findViewById<TextView>(R.id.button_leave).setOnClickListener {\n                    dialog?.dismiss()\n                    mSocket!!.disconnect()\n                    finish()\n                }\n                dialog!!.findViewById<TextView>(R.id.button_continue).setOnClickListener {\n                    dialog?.dismiss()\n                }\n            }\n        }\n    }\n\n    //note 5.1 사진 선택을 완료하면 선택완료 정보를 서버로 보냄,\n    //note 5.2 서버는 모든 송신 여부 정보를 방의 모든 클라이언트에게 송신\n    var showEnteredMember = Emitter.Listener {\n        Log.d(TAG, \"fnsadjfnaskdjfnadjks: fa뭐skdfnasjkfnasjkdfnkadjs\")\n        Log.d(TAG, \"it[0]: ${it[0]}\")\n        invitedFriendsList.clear()\n        var jsonArray: JSONArray = JSONArray(it[0].toString())\n        var gson = Gson()\n        for (i in 0 until jsonArray.length()) {\n            var jsonstring = jsonArray.get(i).toString()\n            var member = gson.fromJson(jsonstring, GroupMember::class.java)\n            invitedFriendsList.add(member)\n        }\n        runBlocking {\n            CoroutineScope(Dispatchers.Main).launch {\n                serverWaitingRoomAdapter.notifyDataSetChanged()\n            }.join()\n        }\n    }\n\n\n    var DoSelectPhoto = Emitter.Listener {\n        CoroutineScope(Dispatchers.Main).launch {\n            server_choose_photo_cardview.visibility = View.VISIBLE\n        }\n\n    }\n\n\n    //note 6. 사진을 모든 클라이언트가 사진을 선택한 경우 사진을 서버로 보냄\n    @RequiresApi(Build.VERSION_CODES.Q)\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        when (requestCode) {\n            100 -> {\n                if (data != null) {\n                    if (data.clipData != null) {\n                        val count = data.clipData!!.itemCount\n\n                        //내가 가져온 사진 개수 저장\n                        numOfMyPhoto = count\n\n                        for (i in 0 until count) {\n                            var imageUri = data.clipData!!.getItemAt(i).uri\n                            var taketime: String? = null\n                            var pictureowner: String? = null\n                            var absolutePath : String = ImageHandler.getFullPathFromUri(this, imageUri)!!\n\n                            serverFilePathList.add(\n                                absolutePath\n                            )\n\n                            //압축\n                            //원본 파일 가져오기\n                            actualImage = FileUtil.from(App.instance, imageUri)\n\n                            //메타정보추출하기\n                            exif = ExifInterface(actualImage!!)\n                            if (exif != null) {\n                                taketime = exif.getAttribute(ExifInterface.TAG_DATETIME).toString()\n//                            pictureowner = exif.getAttribute(ExifInterface.TAG_ARTIST).toString()\n                                var ANDROID_ID: String = Settings.Secure.getString(\n                                    applicationContext.contentResolver,\n                                    Settings.Secure.ANDROID_ID\n                                )\n                                pictureowner = ANDROID_ID\n                            }\n                            //압축하기\n                            runBlocking {\n                                compressedImage = compressImage(actualImage!!)\n                            }\n\n\n                            var username: String? = null\n                            var userimg: String? = null\n                            UserApiClient.instance.me { user, error ->\n                                if (error != null) {\n                                    Log.e(TAG, \"사용자 정보 요청 실패\", error)\n                                    username = null\n                                    userimg = null\n                                } else if (user != null) {\n                                    username = user.kakaoAccount?.profile?.nickname.toString()\n                                    userimg = user.kakaoAccount?.profile?.profileImageUrl.toString()\n                                }\n                            }\n\n\n                            //modelList에 넣어두기\n                            var photoinfo = ServerThumbnailPhotoModel(\n                                imageUri,\n                                taketime,\n                                pictureowner,\n                                i,\n                                count,//,\n//                            username,\n//                            userimg,\n                                absolutePath = absolutePath\n                            )\n\n                            photoModelList.add(photoinfo)\n\n                            CoroutineScope(Dispatchers.IO).launch {\n//                        //압축한 파일 보내기\n                                var image_string =\n                                    ImageHandler.bitmapToString(loadBitmap(compressedImage!!))\n                                mSocket!!.emit(\n                                    \"SendPictureFromClient\",\n                                    image_string,\n                                    roomAddr,\n                                    taketime,\n                                    pictureowner,\n                                    i,\n                                    count,\n                                    username,\n                                    userimg\n                                )\n                            }\n\n                        }\n                    } else { // 사진을 한장만 선택했을 경우\n                        val imageUri = data.data\n                        var taketime: String? = null\n                        var pictureowner: String? = null\n                        var absolutePath : String = ImageHandler.getFullPathFromUri(this, imageUri)!!\n                        // 절대경로 추가\n                        serverFilePathList.add(\n                            absolutePath\n                        )\n\n                        actualImage = FileUtil.from(App.instance, imageUri!!)\n\n                        exif = ExifInterface(actualImage!!)\n                        if (exif != null) {\n                            taketime = exif.getAttribute(ExifInterface.TAG_DATETIME).toString()\n//                            pictureowner = exif.getAttribute(ExifInterface.TAG_ARTIST).toString()\n                            var ANDROID_ID: String = Settings.Secure.getString(\n                                applicationContext.contentResolver,\n                                Settings.Secure.ANDROID_ID\n                            )\n                            pictureowner = ANDROID_ID\n                        }\n\n                        //압축하기\n                        runBlocking {\n                            compressedImage = compressImage(actualImage!!)\n                        }\n\n                        var username: String? = null\n                        var userimg: String? = null\n                        UserApiClient.instance.me { user, error ->\n                            if (error != null) {\n                                Log.e(TAG, \"사용자 정보 요청 실패\", error)\n                                username = null\n                                userimg = null\n                            } else if (user != null) {\n                                username = user.kakaoAccount?.profile?.nickname.toString()\n                                userimg = user.kakaoAccount?.profile?.profileImageUrl.toString()\n                            }\n                        }\n\n                        var photoinfo = ServerThumbnailPhotoModel(\n                            imageUri,\n                            taketime,\n                            pictureowner,\n                            0,\n                            1,//,\n//                            username,\n//                            userimg,\n                            absolutePath = absolutePath\n                        )\n\n                        photoModelList.add(photoinfo)\n\n                        CoroutineScope(Dispatchers.IO).launch {\n//                        //압축한 파일 보내기\n                            var image_string =\n                                ImageHandler.bitmapToString(loadBitmap(compressedImage!!))\n                            mSocket!!.emit(\n                                \"SendPictureFromClient\",\n                                image_string,\n                                roomAddr,\n                                taketime,\n                                pictureowner,\n                                0,\n                                1,\n                                username,\n                                userimg\n                            )\n                        }\n                    }\n                }\n                mSocket!!.emit(\"selectStatus\", 2, roomAddr, infoOfUser)\n            }\n        }\n    }\n\n    fun compressImage(originalImage: File): File? {\n        var ResultImage: File? = null\n        runBlocking {\n            coroutineScope {\n                launch {\n                    // Default compression\n                    ResultImage =\n                        Compressor.compress(this@ServerWaitingRoomActivity, originalImage!!)\n                        {\n//                    resolution(1500, 1500)\n                            quality(95)\n                            format(Bitmap.CompressFormat.JPEG)\n//                    size(1_097_152) // 2 MB\n                        }\n                }\n            }.join()\n        }\n        return ResultImage\n    }\n\n    var imageReturn = Emitter.Listener {\n        var data = it[0].toString()\n        var receivedtaketime = it[1].toString()\n        var receivedowner = it[2].toString()\n        var currentorder = it[3].toString()\n        var tocalcount = it[4].toString()\n        var sum_totalCount = it[5].toString()\n        var is_everyone = it[6].toString().toInt()\n//        var username = it[7].toString()\n//        var userimg = it[8].toString()\n\n\n        returnedImage = ImageHandler.convertString64ToImage(data)\n        runBlocking {\n            CoroutineScope(Dispatchers.IO).launch {\n\n                var filepath: String = \"/sdcard\" + \"/DCIM/Picpho_test/\"\n                var filename: String =\n                    \"Picpho_\" + System.currentTimeMillis().toString() + \".jpg\"\n//                \"Picpho_\" + receivedowner + \"_\" + System.currentTimeMillis().toString() + \".jpg\"\n                var fullFilePath : String = filepath + filename\n                // 절대 경로 저장\n                serverFilePathList.add(fullFilePath)\n\n                var file = File(fullFilePath)\n                // 디렉토리 존재하지 않으면 디렉토리 생성\n                val dirs = File(file.parent.toString())\n                if (!dirs.exists()) dirs.mkdirs()\n                ImageHandler.saveBitmapAsFile(\n                    returnedImage!!,\n                    file,\n                    receivedtaketime,\n                    receivedowner\n                )\n                ServerPhotoRoomActivity.scanFile(App.instance, file, \"jpg\")\n                //modelList에 넣어두기43\n//            var photoinfo = ServerThumbnailPhotoModel(Uri.fromFile(file!!))\n                var photoinfo = ServerThumbnailPhotoModel(\n                    Uri.fromFile(file),\n                    receivedtaketime,\n                    receivedowner,\n                    currentorder.toInt(),\n                    tocalcount.toInt(),\n                    absolutePath = fullFilePath\n                )\n//                    username,\n//                    userimg\n                photoModelList.add(photoinfo)\n                numOfReceivedPhoto++\n\n                Log.e(\n                    \"받은 사진\",\n                    \"${numOfReceivedPhoto} vs ${sum_totalCount.toInt() - numOfMyPhoto}\"\n                )\n                // 사진 싹 다 받았으면 한번 정렬해주기!\n            }.join()\n        }\n\n        if (numOfReceivedPhoto == sum_totalCount.toInt() - numOfMyPhoto) // && is_everyone == 1)\n        { //note 다 받았을 경우 포토룸으로 이동함. 모든 클라우드가 활성화 되야 넘어가게끔 설정해야ㅕ함.\n            Log.e(TAG, \":m Go to photo roo\")\n            val intent = Intent(App.instance, ServerPhotoRoomActivity::class.java)\n            //note sort\n            var sortedModelList =\n                photoModelList.sortedWith(compareBy({ it.taketime }, { it.pictureowner }))\n            photoModelList.clear()\n            photoModelList.addAll(sortedModelList)\n//                intent.putExtra(\"photolist\", photoModelList)\n            startActivity(intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP))\n        }\n    }\n\n\n    //FIREBASE ALARM 파이어베이스 알람 다시 보내기\n    fun reInviteFriends(view:View){\n        Log.d(TAG, \"ServerWaitingRoomActivity - reInviteFriends() called\")\n\n\n        var jsonObjectList = getIntent().getSerializableExtra(\"jsonobjectlist\")\n        Log.e(TAG, \"제이슨 오브젝트 리스트: ${jsonObjectList}\")\n\n        roomName = intent.getStringExtra(\"roomName\").toString()\n        Log.e(TAG, \"룸 네임: ${roomName}\")\n\n        mSocket!!.emit(\"selectedGroup\",\n            MakeGroupActivity.jsonobjectlist, roomAddr, roomName)\n    }\n\n    //친구들 다 안들어왔을 때도 강제로 시작하기\n    fun forcedStart(view:View){\n        mSocket!!.emit(\"forcedStart\", roomAddr)\n    }\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pic_pho/WaitingRoomServer/ServerWaitingRoomActivity.kt	(revision 825bd17a31b302781ec1a87305e6c66a9e3876cc)
+++ app/src/main/java/com/example/pic_pho/WaitingRoomServer/ServerWaitingRoomActivity.kt	(date 1617703930000)
@@ -298,7 +298,6 @@
         CoroutineScope(Dispatchers.Main).launch {
             server_choose_photo_cardview.visibility = View.VISIBLE
         }
-
     }
 
 
@@ -524,7 +523,7 @@
                     receivedowner
                 )
                 ServerPhotoRoomActivity.scanFile(App.instance, file, "jpg")
-                //modelList에 넣어두기43
+                //modelList에 넣어두기
 //            var photoinfo = ServerThumbnailPhotoModel(Uri.fromFile(file!!))
                 var photoinfo = ServerThumbnailPhotoModel(
                     Uri.fromFile(file),
@@ -547,8 +546,8 @@
             }.join()
         }
 
-        if (numOfReceivedPhoto == sum_totalCount.toInt() - numOfMyPhoto) // && is_everyone == 1)
-        { //note 다 받았을 경우 포토룸으로 이동함. 모든 클라우드가 활성화 되야 넘어가게끔 설정해야ㅕ함.
+        if (numOfReceivedPhoto == sum_totalCount.toInt() - numOfMyPhoto && is_everyone == 1)
+        { //note 다 받았을 경우 포토룸으로 이동함. 모든 클라우드가 활성화 되야 넘어가게끔 설정해야함.
             Log.e(TAG, ":m Go to photo roo")
             val intent = Intent(App.instance, ServerPhotoRoomActivity::class.java)
             //note sort
